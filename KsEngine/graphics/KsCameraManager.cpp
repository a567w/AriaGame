/************************************************************************************************/
/** 
 * @file		KsCameraManager.cpp
 * @brief		カメラ管理
 * @author		Tsukasa Kato
 * @date		----/--/--
 * @since		----/--/--
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                            */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"
#include "KsCameraManager.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/
template<> KsCameraManager* KsSingleton< KsCameraManager >::m_pInstance = 0;

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsCameraManager& KsCameraManager::getInstance()
{  
	return (*m_pInstance);  
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsCameraManager* KsCameraManager::getInstancePtr()
{
	return m_pInstance;
}


/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsCameraManager::KsCameraManager()
	: m_pActiveCamera( 0 )
{
}

/************************************************************************************************/
/*
 * デストラクタ
 */
/************************************************************************************************/
KsCameraManager::~KsCameraManager()
{
}

/************************************************************************************************/
/*
 * 初期化処理(マネージャに登録されたときに登録)
 * @param		pParam				パラメータ
 */
/************************************************************************************************/
void* KsCameraManager::initialize( void* pParam )
{
	return pParam;
}

/************************************************************************************************/
/*
 * タスクの実行
 * @param		pParam				パラメータ
 */
/************************************************************************************************/
void* KsCameraManager::execute( void* pParam )
{
	return pParam;
}

/************************************************************************************************/
/*
 * 描画処理
 * @param		pParam				パラメータ
 */
/************************************************************************************************/
void* KsCameraManager::render( void* pParam )
{
	return pParam;
}

/************************************************************************************************/
/*
 * 後処理関数でメモリーから削除されるときに呼ばれる
 * @param		pParam				パラメータ
 */
/************************************************************************************************/
void* KsCameraManager::terminate( void* pParam )
{
	return pParam;
}

/************************************************************************************************/
/*
 * アクティブカメラをセットする
 * @param							カメラ
 */
/************************************************************************************************/
void KsCameraManager::setActiveCamera( KsCamera* pCamera )
{
	for( KsUInt32 i=0; i<m_pCameras.size(); ++i )
	{
		if( m_pCameras[ i ] == pCamera )
		{
			m_pActiveCamera = pCamera;
		}
	}
}

/************************************************************************************************/
/*
 * カメラをセットする
 * @param							カメラ
 */
/************************************************************************************************/
void KsCameraManager::addCamera( KsCamera* pCamera )
{
	m_pCameras.push_back( pCamera );
}

/************************************************************************************************/
/*
 * カメラを削除する
 * @param							カメラ
 */
/************************************************************************************************/
void KsCameraManager::removeCamera( KsCamera* pCamera )
{
	for( KsUInt32 i=0; i<m_pCameras.size(); ++i )
	{
		if( m_pCameras[ i ] == pCamera )
		{
			m_pCameras.erase( i );
			return;
		}
	}
}

