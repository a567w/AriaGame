/************************************************************************************************/
/** 
 * @file		KsRenderType.h
 * @brief		描画ステート
 * @author		Tsukasa Kato
 * @date		----/--/--
 * @since		----/--/--
 * @version		1.0.0
 */
/************************************************************************************************/
#ifndef __KSRENDERTYPE_H__
#define __KSRENDERTYPE_H__

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/
enum KS_PRIMITIVE_TOPOLOGY
{
	KS_PRIMITIVE_TOPOLOGY_UNDEFINED	= 0,
	KS_PRIMITIVE_TOPOLOGY_POINTLIST	= 1,
	KS_PRIMITIVE_TOPOLOGY_LINELIST	= 2,
	KS_PRIMITIVE_TOPOLOGY_LINESTRIP	= 3,
	KS_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= 4,
	KS_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= 5,
	KS_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= 10,
	KS_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= 11,
	KS_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= 12,
	KS_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= 13,
	KS_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST	= 33,
	KS_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST	= 34,
	KS_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST	= 35,
	KS_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST	= 36,
	KS_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST	= 37,
	KS_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST	= 38,
	KS_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST	= 39,
	KS_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST	= 40,
	KS_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST	= 41,
	KS_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST	= 42,
	KS_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST	= 43,
	KS_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST	= 44,
	KS_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST	= 45,
	KS_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST	= 46,
	KS_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST	= 47,
	KS_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST	= 48,
	KS_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST	= 49,
	KS_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST	= 50,
	KS_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST	= 51,
	KS_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST	= 52,
	KS_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST	= 53,
	KS_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST	= 54,
	KS_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST	= 55,
	KS_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST	= 56,
	KS_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST	= 57,
	KS_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST	= 58,
	KS_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST	= 59,
	KS_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST	= 60,
	KS_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST	= 61,
	KS_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST	= 62,
	KS_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST	= 63,
	KS_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST	= 64,
};


typedef enum _KS_CPU_ACCESS_FLAG
{
	ksCPU_ACCESS_WRITE	= 0x10000L,
	ksCPU_ACCESS_READ	= 0x20000L

}KS_CPU_ACCESS_FLAG;

typedef enum _KS_MAP
{
	KS_MAP_READ					= 1,
	KS_MAP_WRITE				= 2,
	KS_MAP_READ_WRITE			= 3,
	KS_MAP_WRITE_DISCARD		= 4,
	KS_MAP_WRITE_NO_OVERWRITE	= 5
}KS_MAP;


typedef enum KS_FILTER
{
	KS_FILTER_MIN_MAG_MIP_POINT	= 0,
	KS_FILTER_MIN_MAG_POINT_MIP_LINEAR	= 0x1,
	KS_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x4,
	KS_FILTER_MIN_POINT_MAG_MIP_LINEAR	= 0x5,
	KS_FILTER_MIN_LINEAR_MAG_MIP_POINT	= 0x10,
	KS_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x11,
	KS_FILTER_MIN_MAG_LINEAR_MIP_POINT	= 0x14,
	KS_FILTER_MIN_MAG_MIP_LINEAR	= 0x15,
	KS_FILTER_ANISOTROPIC	= 0x55,
	KS_FILTER_COMPARISON_MIN_MAG_MIP_POINT	= 0x80,
	KS_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR	= 0x81,
	KS_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x84,
	KS_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR	= 0x85,
	KS_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT	= 0x90,
	KS_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x91,
	KS_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT	= 0x94,
	KS_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR	= 0x95,
	KS_FILTER_COMPARISON_ANISOTROPIC	= 0xd5

}KS_FILTER;

typedef enum KS_FILTER_TYPE
{	
	KS_FILTER_TYPE_POINT  = 0,
	KS_FILTER_TYPE_LINEAR = 1

}KS_FILTER_TYPE;

typedef enum KS_TEXTURE_ADDRESS_MODE
{	
	KS_TEXTURE_ADDRESS_WRAP	= 1,
	KS_TEXTURE_ADDRESS_MIRROR	= 2,
	KS_TEXTURE_ADDRESS_CLAMP	= 3,
	KS_TEXTURE_ADDRESS_BORDER	= 4,
	KS_TEXTURE_ADDRESS_MIRROR_ONCE	= 5

}KS_TEXTURE_ADDRESS_MODE;


typedef enum KS_COMPARISON_FUNC
{	
	KS_COMPARISON_NEVER	= 1,
	KS_COMPARISON_LESS	= 2,
	KS_COMPARISON_EQUAL	= 3,
	KS_COMPARISON_LESS_EQUAL	= 4,
	KS_COMPARISON_GREATER	= 5,
	KS_COMPARISON_NOT_EQUAL	= 6,
	KS_COMPARISON_GREATER_EQUAL	= 7,
	KS_COMPARISON_ALWAYS	= 8

}KS_COMPARISON_FUNC;

typedef enum KS_DEPTH_WRITE_MASK
{	
	KS_DEPTH_WRITE_MASK_ZERO = 0,
	KS_DEPTH_WRITE_MASK_ALL  = 1

}KS_DEPTH_WRITE_MASK;

typedef enum KS_STENCIL_OP
{	
	KS_STENCIL_OP_KEEP	= 1,
	KS_STENCIL_OP_ZERO	= 2,
	KS_STENCIL_OP_REPLACE	= 3,
	KS_STENCIL_OP_INCR_SAT	= 4,
	KS_STENCIL_OP_DECR_SAT	= 5,
	KS_STENCIL_OP_INVERT	= 6,
	KS_STENCIL_OP_INCR	= 7,
	KS_STENCIL_OP_DECR	= 8
}KS_STENCIL_OP;

typedef enum KS_BIND_FLAG
{
	KS_BIND_VERTEX_BUFFER		= 0x1L,
	KS_BIND_INDEX_BUFFER		= 0x2L,
	KS_BIND_CONSTANT_BUFFER		= 0x4L,
	KS_BIND_SHADER_RESOURCE		= 0x8L,
	KS_BIND_STREAM_OUTPUT		= 0x10L,
	KS_BIND_RENDER_TARGET		= 0x20L,
	KS_BIND_DEPTH_STENCIL		= 0x40L,
	KS_BIND_UNORDERED_ACCESS	= 0x80L,
	KS_BIND_DECODER				= 0x200L,
	KS_BIND_VIDEO_ENCODER		= 0x400L

}KS_BIND_FLAG;

typedef enum KS_USAGE
{
	KS_USAGE_DEFAULT	= 0,
	KS_USAGE_IMMUTABLE	= 1,
	KS_USAGE_DYNAMIC	= 2,
	KS_USAGE_STAGING	= 3
}KS_USAGE;

typedef struct KS_SAMPLER_DESC
{
	KS_FILTER					Filter;
	KS_TEXTURE_ADDRESS_MODE		AddressU;
	KS_TEXTURE_ADDRESS_MODE		AddressV;
	KS_TEXTURE_ADDRESS_MODE		AddressW;
	KsReal						MipLODBias;
	KsUInt32					MaxAnisotropy;
	KS_COMPARISON_FUNC			ComparisonFunc;
	KsReal						BorderColor[ 4 ];
	KsReal						MinLOD;
	KsReal						MaxLOD;

}KS_SAMPLER_DESC;


typedef struct KS_DEPTH_STENCILOP_DESC
{
	KS_STENCIL_OP				StencilFailOp;
	KS_STENCIL_OP				StencilDepthFailOp;
	KS_STENCIL_OP				StencilPassOp;
	KS_COMPARISON_FUNC			StencilFunc;

}KS_DEPTH_STENCILOP_DESC;

typedef struct KS_DEPTH_STENCIL_DESC
{
	KsBool						DepthEnable;
	KS_DEPTH_WRITE_MASK			DepthWriteMask;
	KS_COMPARISON_FUNC			DepthFunc;
	KsBool						StencilEnable;
	KsUInt8						StencilReadMask;
	KsUInt8						StencilWriteMask;
	KS_DEPTH_STENCILOP_DESC		FrontFace;
	KS_DEPTH_STENCILOP_DESC		BackFace;

}KS_DEPTH_STENCIL_DESC;


typedef struct KS_SUBRESOURCE_DATA
{
	const void*					pSysMem;
	KsUInt32					SysMemPitch;
	KsUInt32					SysMemSlicePitch;

}KS_SUBRESOURCE_DATA;



#endif /* __KSRENDERTYPE_H__ */

