/************************************************************************************************/
/** 
 * @file		KsTextureGL.cpp
 * @brief		OpenGL用テクスチャ
 * @author		Tsukasa Kato
 * @date		----/--/--
 * @since		----/--/--
 * @version		1.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                            */
/*==============================================================================================*/
#include "KsTextureGL.h"
#include "KsTextureManager.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/************************************************************************************************/
/*
 * 
 */
/************************************************************************************************/
KsTextureGL::KsTextureGL() : m_pImage( 0 )
{
}
/************************************************************************************************/
/*
 * 
 */
/************************************************************************************************/
KsTextureGL::KsTextureGL( const KsChar* pFileName, KsUInt32 flags )
{
	m_pImage = 0;

	/* テクスチャのフラグセット */
	m_flags  = flags;
}
/************************************************************************************************/
/*
 * コンストラクタ
 * @param		pImage			イメージファイル
 * @param		flags			読み込み方法のフラグ
 */
/************************************************************************************************/
KsTextureGL::KsTextureGL( KsImage* pImage, KsUInt32 flags )
{
	if( flags ){
		m_pImage = pImage->clone();
	}
	else{
		m_pImage = pImage;
	}

	m_width  = m_pImage->m_width;
	m_height = m_pImage->m_height;
}
/************************************************************************************************/
/*
 * 
 */
/************************************************************************************************/
KsTextureGL::~KsTextureGL()
{
	/* イメージデータ開放 */
	ksDELETE( m_pImage  );
}
/************************************************************************************************/
/*
 * 
 */
/************************************************************************************************/
void* KsTextureGL::lock()
{
	return NULL;
}
/************************************************************************************************/
/*
 * 
 */
/************************************************************************************************/
void KsTextureGL::unlock()
{
}
/************************************************************************************************/
/*
 * 
 */
/************************************************************************************************/
void KsTextureGL::destroy()
{
	/* テクスチャマネージャを使用しているかどうかのチェック */
	if( m_flags & ksTEXTURE_FLAG_USE_MANAGER )
	{
		KsTextureManager*	pTMG =KsTextureManager::instance();

		pTMG->destroy( this );
	}
	else{
		/* 参照カウントを下げます */
		dec();
	}
}

/************************************************************************************************/
/*
 * テクスチャをアクティブにする
 */
/************************************************************************************************/
void KsTextureGL::active()
{
#if 0
		/* 今は、本当に単純なものしかサポートしない( mipmap, 高速転送モード, multi clutなどはダメ ) */
		/* 普通にイメージをセットする */
		if( m_pImage == 0 ) return;

		static KsInt32		pixelFormatPSP[] = { 0, SCEGU_PF5650, SCEGU_PF5551, SCEGU_PF4444,  SCEGU_PF8888 };
		static KsInt32		imageFormatPSP[] = { 0, SCEGU_PF5650, SCEGU_PF5551, SCEGU_PF4444,  SCEGU_PF8888, SCEGU_PFIDX4, SCEGU_PFIDX8, SCEGU_PFIDX16, SCEGU_PFIDX32 };

		/* インデックスカラーを使用しているかどうか */
		if( m_pImage->m_pClut )
		{
			/* ピクセルフォーマット */
			sceGuClutMode( pixelFormatPSP[ m_pImage->m_pixelFormat ], 0, 0xff, 0 );
			sceGuClutLoad( 1, m_pImage->m_pClut ) ;
		}

		/* イメージをセット	*/
		sceGuTexMode( imageFormatPSP[ m_pImage->m_imageFormat ], 0, SCEGU_SINGLE_CLUT, SCEGU_TEXBUF_NORMAL );
		sceGuTexImage( 0, m_pImage->m_width, m_pImage->m_height, m_pImage->m_width, m_pImage->m_pData );
#endif
}



