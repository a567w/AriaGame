/************************************************************************************************/
/** 
 * @file		KsAnimation2D.h
 * @brief		ボーン
 * @author		Tsukasa Kato
 * @date		----/--/--
 * @since		----/--/--
 * @version		1.0
 */
/************************************************************************************************/
#ifndef __KSANIMATION2D_H__
#define __KSANIMATION2D_H__


/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/
#include "KsAnim2DTrack.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/



#if 0
/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsMesh::KsMesh() : m_id( -1 )
				 , m_flags( 0 )
				 , m_pHierarchy( 0 )
{
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsMesh::~KsMesh()
{
	destroy();
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsMesh::destroy()
{
	ksDELETE( m_pHierarchy );

	for( KsUInt32 i=0; i<m_pSubMeshes.size(); i++ )
	{
		delete m_pSubMeshes[ i ];
	}
	m_pSubMeshes.clear();
}

/************************************************************************************************/
/*
 * サブメッシュを表示状態にする。
 */
/************************************************************************************************/
void KsMesh::show()
{
	m_flags &= ~ksMESH_FLAGS_HIDE;
}

/************************************************************************************************/
/*
 * サブメッシュを非表示状態にする。
 */
/************************************************************************************************/
void KsMesh::hide()
{
	m_flags |= ksMESH_FLAGS_HIDE;
}

/************************************************************************************************/
/*
 * サブメッシュを非表示状態にする。
 */
/************************************************************************************************/
void KsMesh::drawEntry( KsJoint* pJoint )
{
	if( pJoint->getTarget() >= 0 )
	{
		m_pDrawJoints.push_back( pJoint );
	}

	for( KsUInt32 i=0; i<pJoint->getNumChild(); i++ )
	{
		drawEntry( pJoint->getChild( i ) );
	}
}

/************************************************************************************************/
/*
 * 更新処理
 * @param	pCtrlJoint		コントロールジョイント
 */
/************************************************************************************************/
void KsMesh::update( KsJoint* pCtrlJoint )
{
	/* 階層構造を持っているか？ */
	if( m_pHierarchy == NULL )
	{
		return;
	}

	/* 階層構造の更新 */
	if( m_flags & ksMESH_FLAGS_HIERARCHY_UPDATE )
	{
		m_pHierarchy->update( pCtrlJoint );

		m_flags &= ~ksMESH_FLAGS_HIERARCHY_UPDATE;
	}

	/* 描画順リストの更新 */
	if( m_flags & ksMESH_FLAGS_DRAW_UPDATE )
	{
		m_pDrawJoints.clear();

		for( KsUInt32 i=0; i<m_pHierarchy->getNumRootJoint(); i++ )
		{
			KsJoint*	pJoint = m_pHierarchy->getRootJoint( i );
			drawEntry( pJoint );
		}

		m_flags &= ~ksMESH_FLAGS_DRAW_UPDATE;
	}
}

/************************************************************************************************/
/*
 * メッシュを描画する
 */
/************************************************************************************************/
void KsMesh::draw( KsRenderSystem* pRS )
{
	m_pHierarchy->update();
	/* 描画しない */
	if( m_flags & ksMESH_FLAGS_HIDE )
	{
		return;
	}

	/* サブメッシュ描画 */
	for( KsUInt32 i=0; i<m_pDrawJoints.size(); i++ )
	{
		KsJoint*	pJoint = m_pDrawJoints[ i ];
		KsInt32	target = pJoint->getTarget();

		/* 座標移動 */
		pRS->setTransform( ksTRANSFORM_WORLD, &pJoint->m_worldMatrix );

		/* 描画 */
		m_pSubMeshes[ target ]->draw( pRS );
	}
}

/************************************************************************************************/
/*
 * ルートジョイント数を取得する
 * @return		ルートジョイント数
 */
/************************************************************************************************/
KsUInt32 KsMesh::getNumRootJoint() const 
{
	if( m_pHierarchy )
	{
		return m_pHierarchy->getNumRootJoint(); 
	}

	return 0;
}





/************************************************************************************************/
/**
 * @class		KsAnimation2D
 * @brief		アニメーション
 * @author		Tsukasa Kato
 * @date		----/--/--
 * @since		----/--/--
 */
/************************************************************************************************/
class KsAnimation2D
{
		typedef KsArray<KsAnimTrack*>		KsAnimTrackList;

	public:
		/**
		 * アニメの補完の種類
		 */
		enum ksANIM_INTERPOLATE_KIND
		{
			ksANIM_INTERPOLATE_LINEAR,		/**< 直線補完		*/
			ksANIM_INTERPOLATE_SPLINE,		/**< スプライン補完	*/
		};

	public:
		/**
		 * 更新処理
		 * @param		dt		更新時間
		 * @note				時間は,[ 0.0f･･･1.0f ]で管理する
		 */
		void					update( KsReal dt );

		/**
		 * 
		 */
		void					animation( KsReal time, KsMesh* pMesh );

		/**
		 * トラック数
		 * @return				トラック数
		 */
		KsInt32					getNumTrack() const { return static_cast<KsInt32>( m_pvTracks.size() ); }

	public:
		KsAnimTrackList			m_pvTracks;			/**< オブジェクトごと	*/
		KsReal					m_frameRate;		/**< フレームレート		*/
		KsReal					m_startTime;		/**< 開始時間			*/
		KsReal					m_endTime;			/**< 終了時間			*/
};
#endif

#endif /* __KSANIMATION2D_H__ */


