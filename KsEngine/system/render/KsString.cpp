/************************************************************************************************/
/** 
 * @file		StString.cpp
 * @brief		文字列クラス
 * @author		Tsukasa Kato
 * @date		2004/10/17
 * @since		2004/10/17
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                            */
/*==============================================================================================*/
#include "StString.h"

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString::StString( const StString& string ) : m_pString( 0 ), m_length( 0 ) 
{
	/* 長さを取得 */
	m_length = string.length();

	/* メモリーを確保しなおす */
	delete [] m_pString;

	m_pString = new StChar[ m_length + 1 ];

	/* コピーする */
	strcpy( m_pString, string.c_str() );

	m_pString[ m_length ] = '\0';
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString::StString( const StChar* pString ) : m_pString( 0 ), m_length( 0 ) 
{
	/* 長さを取得 */
	m_length = static_cast<StUInt32>( strlen(pString) );

	/* メモリーを確保しなおす */
	delete [] m_pString;

	m_pString = new StChar[ m_length + 1 ];

	/* コピーする */
	strcpy( m_pString, pString );

	m_pString[ m_length ] = '\0';
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString::~StString()
{
	if( m_pString ){ delete [] m_pString; }
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void StString::clear()
{
	delete [] m_pString;
	m_length  = 0;
	m_pString = 0;
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString& StString::operator=( const StString& string )
{
	/* 長さを取得 */
	m_length = string.length();

	/* メモリーを確保しなおす */
	delete [] m_pString;

	m_pString = new StChar[ m_length + 1 ];

	/* コピーする */
	strcpy( m_pString, string.c_str() );

	m_pString[ m_length ] = '\0';

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString& StString::operator=( const StChar* pString )
{
	/* 長さを取得 */
	m_length = static_cast<StUInt32>( strlen(pString) );

	/* メモリーを確保しなおす */
	delete [] m_pString;

	m_pString = new StChar[ m_length + 1 ];

	/* コピーする */
	strcpy( m_pString, pString );

	m_pString[ m_length ] = '\0';

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString& StString::operator=( const StChar c )
{
	/* 長さを取得 */
	m_length = 1;

	/* メモリーを確保しなおす */
	delete [] m_pString;

	m_pString = new StChar[ 2 ];
	m_pString[ 0 ] = c;
	m_pString[ 1 ] = '\0';

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString& StString::operator+=( const StString& string )
{
	/* 長さを取得 */
	m_length += string.length();

	/* メモリーを確保しなおす */
	StChar*		pTemp = new StChar[ m_length+1 ];

	strcpy( pTemp, m_pString );
	strcat( pTemp, string.c_str() );

	delete [] m_pString;

	m_pString = pTemp;

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString& StString::operator+=( const StChar* pString )
{
	/* 長さを取得 */
	m_length += static_cast<StUInt32>( strlen(pString) );

	/* メモリーを確保しなおす */
	StChar*		pTemp = new StChar[ m_length+1 ];

	strcpy( pTemp, m_pString );
	strcat( pTemp, pString );

	delete [] m_pString;

	m_pString = pTemp;

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString& StString::operator+=( const StChar c )
{
	/* メモリーを確保しなおす */
	StChar*		pTemp = new StChar[ m_length+2 ];

	strcpy( pTemp, m_pString );
	pTemp[ m_length   ] = c;
	pTemp[ m_length+1 ] = '\0';

	/* 長さを取得 */
	m_length++;

	delete [] m_pString;

	m_pString = pTemp;

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString StString::operator+(const StString& string )
{
	StString		temp;

	temp  = (*this);
	temp += string;

	return temp;
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString StString::operator+(const StChar* pString )
{
	StString		temp;

	temp  = (*this);
	temp += pString;

	return temp;
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
StString StString::operator+(const StChar c )
{
	StString		temp;

	temp  = (*this);
	temp += c;

	return temp;
}



