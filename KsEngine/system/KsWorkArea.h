/************************************************************************************************/
/** 
 * @file		KsWorkArea.h
 * @brief		タスク用ワーク
 * @author		Tsukasa Kato
 * @date		2004/10/17
 * @since		2004/10/17
 * @version		0.1
 */
/************************************************************************************************/
#ifndef __KSWORKAREA_H__
#define __KSWORKAREA_H__

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/
#include "KsCore.h"

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/
class KsTaskBase;

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/
#define ksWORK_AREA_MAX	( 1<<14 )		/**< ワークエリアの最大値		*/

/************************************************************************************************/
/**
 * 
 * @class		KsWorkArea
 * @brief		タスク用ワーク
 * @date		2004/10/17
 * @since		2004/10/17
 * @version		0.1
 */
/************************************************************************************************/
class ksENGINE_API KsWorkArea
{
	public:
		/**
		 * コンストラクタ
		 */
		KsWorkArea() {}

		/**
		 * タスクのポインタを格納
		 * @param		pTask			格納するタスクのポインタ
		 */
		static void					push( KsTaskBase* pTask );

		/**
		 * タスクのポインタを取り出し
		 * @return						タスクのポインタを取り出す
		 */
		static KsTaskBase*					pop();

		/**
		 * ワーククリアー(カウントだけクリアーされる使う前には、必ずクリアーする)
		 */
		static void					clear();

		static KsTaskBase*					m_work[ ksWORK_AREA_MAX ];		/**< タスク保存用ワークエリア		*/
		static KsInt32					m_count;						/**< 格納されているタスクの数		*/

		//描画リンクを変更するタスクのマネージャがNULLだったらアサートでとめる
		//detach削除のときにたくさん呼ばれると思われる
		//static KsTaskManager*			m_pManager;
		//static void					renderLink();

		/* ワークエリアが最大値のとき、または、登録されたタスクのマネージャのポインタが違うときに描画リンクを変更する */

		/* 基本的にマネージャがひとつなら描画前に変更タスクをリンクしなおすだけだが・・・、 */
};

#endif		/* __KSWORKAREA_H__ */

