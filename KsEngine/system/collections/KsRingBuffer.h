/************************************************************************************************/
/** 
 * @file		KsRingBuffer.h
 * @brief		リングバッファ
 * @author		Tsukasa Kato
 * @date		2004/10/17
 * @since		2004/10/17
 * @version		0.1
 */
/************************************************************************************************/
#ifndef __KSRINGBUFFER_H__
#define __KSRINGBUFFER_H__

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/


/************************************************************************************************/
/**
 * リングバッファのクラス
 *
 * @author  kato tukasa
 * @since   2003/03/25
 * @version 2003/03/25
 */
/************************************************************************************************/
template < typename T, KsInt32 order > class KsRingBuffer
{
	public:
		/**
		 * データを格納します
		 * @param  T		格納するデータ
		 */
		void						push( T data )
		{
			m_buffer[ m_pos ] = data;
			if( ++m_pos > order-1 )
			{
				m_pos = 0;
			}
		};
	
		/**
		 * データを取り出します
		 * @return 一つ前格納したデータ
		 */
		T							pop()
		{
			if( --m_pos < 0 )
			{
				m_pos = order-1;
			}		
			return m_buffer[ m_pos ];
		};

		/**
		 * 指定番号に強制的にデータを格納する
		 * @param  num		データを入れる指定番号
		 * @retval ksTRUE	成功
		 * @retval ksFALSE	失敗
		 */
		KsBool						insert( KsInt32 num, T data )
		{
			if( num < order )
			{
				m_buffer[ num ] = data;
				return ksTRUE;
			}
			return ksFALSE;
		};
	
		/**
		 * 過去のデータを取得します。
		 * @param  num 過去の何番目かのデータ番号
		 * @return 過去のデータ
		 */
		T							getData( KsInt32 num )
		{
			if( num < order )
			{
				KsInt32 index = m_pos - num -1;
				if( index < 0 )
				{
					index += order;
				}
				return m_buffer[ m_pos ];
			}
			return m_buffer[ 0 ];
		};
	
		/**
		 * コンストラクタ
		 */
									KsRingBuffer() : m_pos( 0 ) {}
	
		/**
		 * デストラクタ
		 */
									~KsRingBuffer() {}
	
		/**
		 * 現在のデータ挿入位置を取得する
		 * @return					挿入位置を返す
		 */
		KsInt32						getPos() { return m_pos; }

	private:
		T							m_buffer[ order ];		/**< バッファ	*/
		KsInt32						m_pos;					/**< データ位置	*/
};


#endif		/* __KSRINGBUFFER_H__ */




