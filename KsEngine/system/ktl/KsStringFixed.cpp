/************************************************************************************************/
/** 
 * @file		KsStringFixed.cpp
 * @brief		文字列クラス
 * @author		Tsukasa Kato
 * @date		2004/10/17
 * @since		2004/10/17
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"
#include "KsEngine/system/ktl/KsStringFixed.h"

/************************************************************************************************/
/*
 * コンストラクタ
 * @param		string		文字列クラスの参照
 */
/************************************************************************************************/
KsStringFixed::KsStringFixed( const KsStringFixed& string ) : m_length( 0 ) 
{
	/* 長さを取得 */
	m_length = string.length();

	/* コピーする */
	ks_strcpy( m_string, string.c_str() );

	m_string[ m_length ] = '\0';
}
/************************************************************************************************/
/*
 * コンストラクタ
 * @param		pString		文字列のポインタ
 */
/************************************************************************************************/
KsStringFixed::KsStringFixed( const KsChar* pString ) : m_length( 0 ) 
{
	/* 長さを取得 */
	m_length = static_cast<KsUInt32>( ks_strlen(pString) );

	/* コピーする */
	ks_strcpy( m_string, pString );

	m_string[ m_length ] = '\0';
}
/************************************************************************************************/
/*
 * デストラクタ
 */
/************************************************************************************************/
KsStringFixed::~KsStringFixed()
{
}

/************************************************************************************************/
/*
 * 指定範囲の文字を削除する
 * @param		top			消す文字列の先頭
 * @param		num			消す文字列の数
 */
/************************************************************************************************/
void KsStringFixed::erase( KsUInt32 top, KsUInt32 num )
{
	KsChar		buf[ ksSTRING_LENGTH ];
	KsUInt32	length = m_length - num + 1;

	ks_strncpy( buf, &m_string[ top ], num );
	buf[ length ] = '\0';
	ks_strcpy( m_string, buf );
	m_length  = length;
}

/************************************************************************************************/
/*
 * 文字列をクリア
 */
/************************************************************************************************/
void KsStringFixed::clear()
{
	m_length  = 0;
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsStringFixed& KsStringFixed::operator=( const KsStringFixed& string )
{
	/* 長さを取得 */
	m_length = string.length();

	/* コピーする */
	ks_strcpy( m_string, string.c_str() );

	m_string[ m_length ] = '\0';

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsStringFixed& KsStringFixed::operator=( const KsChar* pString )
{
	/* 長さを取得 */
	m_length = static_cast<KsUInt32>( ks_strlen(pString) );

	/* コピーする */
	ks_strcpy( m_string, pString );

	m_string[ m_length ] = '\0';

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsStringFixed& KsStringFixed::operator=( const KsChar c )
{
	/* 長さを取得 */
	m_length = 1;

	m_string[ 0 ] = c;
	m_string[ 1 ] = '\0';

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsStringFixed& KsStringFixed::operator+=( const KsStringFixed& string )
{
	/* 長さを取得 */
	m_length += string.length();

	ks_strcat( m_string, string.c_str() );

	m_string[ m_length ] = '\0';

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsStringFixed& KsStringFixed::operator+=( const KsChar* pString )
{
	/* 長さを取得 */
	m_length += static_cast<KsUInt32>( ks_strlen(pString) );

	ks_strcat( m_string, pString );

	m_string[ m_length ] = '\0';

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsStringFixed& KsStringFixed::operator+=( const KsChar c )
{
	m_string[ m_length   ] = c;
	m_string[ m_length+1 ] = '\0';

	/* 長さを取得 */
	m_length++;

	return	(*this);
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsStringFixed KsStringFixed::operator+(const KsStringFixed& string )
{
	KsStringFixed		temp;

	temp  = (*this);
	temp += string;

	return temp;
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsStringFixed KsStringFixed::operator+(const KsChar* pString )
{
	KsStringFixed		temp;

	temp  = (*this);
	temp += pString;

	return temp;
}
/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsStringFixed KsStringFixed::operator+(const KsChar c )
{
	KsStringFixed		temp;

	temp  = (*this);
	temp += c;

	return temp;
}

