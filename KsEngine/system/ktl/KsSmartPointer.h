/*************************************************************************************************/
/** 
 * @file	KsSmartPointer.h
 * @brief	シングルトン
 * @author	Tsukasa Kato
 * @date	2003/10/25
 * @since	2003/10/25
 */
/*************************************************************************************************/
#ifndef __KSSMARTPOINTER_H__
#define __KSSMARTPOINTER_H__

/*===============================================================================================*/
/*								<< インクルードファイル >>										 */
/*===============================================================================================*/
#include "KsSmartPointerObject.h"

/*===============================================================================================*/
/*										<< 定義 >>												 */
/*===============================================================================================*/

/*************************************************************************************************/
/**
 * スマートポインタ(リンク方式)
 *	@author	 kato tukasa
 * 	@since   2002/12/05
 *	@version 2002/12/05
 */
/*************************************************************************************************/
template< typename T > class KsSmartPtr : public KsSmartPtrObject
{
		//friend	class KsSmartPtr<T>;
	public:
		/* 型をセット */
		typedef T							element_type;
		
		/* explicit 明示的な型チェック用 */
		explicit							KsSmartPtr( T* p = 0 );
		
		/**
		 * コピーコンストラクタ
		 */
											KsSmartPtr( const KsSmartPtr<T>& ref );
		
		/**
		 * デストラクタ
		 */
											~KsSmartPtr();

		/**
		 * 削除処理
		 */
		void								destroy();

		/**
		 * リンクカウントを取得
		 */
		KsInt32							getCount() const;

		/**
		 * = 演算子オーバーロード
		 */
		KsSmartPtr<T>&						operator = ( const KsSmartPtr<T>& ref );

		/**
		 * = 演算子オーバーロード
		 */
		KsSmartPtr<T>&						operator = ( const T* ptr );


		KsBool								operator < ( const KsSmartPtr<T>& ref ) const;

		T**									operator&()	const { return &m_ptr; }
		T&									operator*()	const { return *m_ptr; }
		T*									operator->()	const { return  m_ptr; }
		T*									get()			const { return  m_ptr; }

	private:
		T*									m_ptr;		/**< ポインタ部分			*/
		mutable const KsSmartPtr<T>*		m_pPrev;	/**< 前のリンクポインタ		*/
		mutable const KsSmartPtr<T>*		m_pNext;	/**< 後ろのリンクポインタ	*/

};

/*************************************************************************************************/
/*---------------------------<< インライン部分ヘッダーファイル >>--------------------------------*/
								#include "KsSmartPointer.inl"
/*-----------------------------------------------------------------------------------------------*/
/*************************************************************************************************/


#endif	/* __KSSMARTPOINTER_H__ */
