/************************************************************************************************/
/**
 * @file		KsRand.cpp
 * @brief		乱数発生（高速バージョン）
 * @author		Tsukasa Kato
 * @date		2004/11/30
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/
#include "KsRand.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/
static KsUInt32 s_rand_seed = 1L;

/************************************************************************************************/
/**
 * 乱数発生の種
 * @param	seed	乱数の種
 */
/************************************************************************************************/
void KsRandSeed( KsUInt32 seed )
{
	s_rand_seed = seed;
}

/************************************************************************************************/
/**
 * 乱数発生
 * @return		0 <= return <= 65535 の乱数を返します
 */
/************************************************************************************************/
KsUInt32 KsRand()
{
	s_rand_seed = ( s_rand_seed & 0xffff ) * 214013L + 2531011L;
	return (s_rand_seed >> 16) & 0xffff;
}

/************************************************************************************************/
/**
 * 乱数発生
 * @return		0.0f <= return <= 1.0f の乱数を返します
 */
/************************************************************************************************/
KsReal KsRandF()
{
	s_rand_seed = ( s_rand_seed & 0xffff ) * 214013L + 2531011L;
	return static_cast<KsReal>( ((s_rand_seed >> 16) & 0xffff)/(KsReal)65535.0f );
}

/************************************************************************************************/
/**
 * 乱数発生
 * @param	num		乱数範囲
 * @return			0 <= return <= num の乱数を返します
 */
/************************************************************************************************/
KsUInt32 KsRandX( KsUInt32 num )
{
	return  ( KsRand()*num )/65535;
}



