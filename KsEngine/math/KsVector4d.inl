/*************************************************************************************************/
/*                                                                                               */
/*                           << KsVector4d ÉNÉâÉXÇÃÉCÉìÉâÉCÉìä÷êî >>                             */
/*                                                                                               */
/*************************************************************************************************/
//===============================================================================================//
// îzóÒì‡ÇÃílÇï‘Ç∑
//===============================================================================================//
inline KsReal& KsVector4d::operator [] ( KsInt32 index )
{
	return( ( (KsReal*)&x )[ index ] );
}
//===============================================================================================//
// îzóÒì‡ÇÃílÇï‘Ç∑
//===============================================================================================//
inline const KsReal& KsVector4d::operator [] ( KsInt32 index ) const
{
	return( ( (KsReal*)&x )[ index ] );
}
//===============================================================================================//
// = ââéZéq (ë„ì¸)
//===============================================================================================//
inline const KsVector4d& KsVector4d::operator = ( const KsVector4d &refVector )
{
	x = refVector.x;
	y = refVector.y;
	z = refVector.z;
	w = refVector.w;

	return( *this );
}
//===============================================================================================//
// += ââéZéq
//===============================================================================================//
inline KsVector4d& KsVector4d::operator += ( const KsVector4d& refVector )
{
	x += refVector.x;
	y += refVector.y;
	z += refVector.z;
	w += refVector.w;

	return	(*this);
}
//===============================================================================================//
// -= ââéZéq
//===============================================================================================//
inline KsVector4d& KsVector4d::operator -= ( const KsVector4d& refVector )
{
	x -= refVector.x;
	y -= refVector.y;
	z -= refVector.z;
	z -= refVector.w;

	return	(*this);
}
//===============================================================================================//
//  *= ââéZéq
//===============================================================================================//
inline KsVector4d& KsVector4d::operator *= ( KsReal s )
{
	x *= s;
	y *= s;
	z *= s;
	w *= s;

	return	(*this);
}
//===============================================================================================//
//  /= ââéZéq
//===============================================================================================//
inline KsVector4d& KsVector4d::operator /= ( KsReal s )
{
	if( s < ksTOLERANCE ){
		return (*this);
	}

	x /= s;
	y /= s;
	z /= s;
	w /= s;

	return	(*this);
}
//===============================================================================================//
// + ââéZéq(â¡éZ)
//===============================================================================================//
inline KsVector4d KsVector4d::operator + () const 
{
	return ( *this );
}

//===============================================================================================//
// - ââéZéq(å∏éZ)
//===============================================================================================//
inline KsVector4d KsVector4d::operator - () const 
{
	return KsVector4d( -x, -y, -z, -w );
}
//===============================================================================================//
// + ââéZéq(â¡éZ)
//===============================================================================================//
inline KsVector4d KsVector4d::operator + ( const KsVector4d& refVector ) const 
{
	return KsVector4d( x + refVector.x, y + refVector.y, z + refVector.z, w + refVector.w );
}
//===============================================================================================//
// - ââéZéq(å∏éZ)
//===============================================================================================//
inline KsVector4d KsVector4d::operator - ( const KsVector4d& refVector ) const 
{
	return KsVector4d( x - refVector.x, y - refVector.y, z - refVector.z, w - refVector.w );
}
//===============================================================================================//
// * ââéZéq(ä|éZ) 
//===============================================================================================//
inline KsVector4d KsVector4d::operator * ( KsReal s ) const 
{
	return KsVector4d( s*x, s*y, s*z, s*w );
}
//===============================================================================================//
// / ââéZéq(äÑéZ)
//===============================================================================================//
inline KsVector4d KsVector4d::operator / ( KsReal s ) const 
{
	if( KsFabs( s ) < ksTOLERANCE ){
		KsVector4d( x, y, z, w );
	}

	return KsVector4d( x/s, y/s, z/s, w/s );
}
//===============================================================================================//
// == ââéZéq(î‰är)
//===============================================================================================//
inline KsBool KsVector4d::operator == ( const KsVector4d& refVector ) const 
{
	return (	( KsFabs( x - refVector.x ) < ksTOLERANCE ) && ( KsFabs( y - refVector.y ) < ksTOLERANCE ) &&
				( KsFabs( z - refVector.z ) < ksTOLERANCE ) && ( KsFabs( w - refVector.w ) < ksTOLERANCE ) );
}
//===============================================================================================//
// != ââéZéq(î‰är)
//===============================================================================================//
inline KsBool KsVector4d::operator != ( const KsVector4d& refVector ) const 
{
	return (	( KsFabs( x - refVector.x ) > ksTOLERANCE ) || ( KsFabs( y - refVector.y ) > ksTOLERANCE ) ||
				( KsFabs( z - refVector.z ) > ksTOLERANCE ) || ( KsFabs( w - refVector.w ) > ksTOLERANCE ) );
}
//===============================================================================================//
// ílÇÉZÉbÉgÇ∑ÇÈ
//===============================================================================================//
inline void KsVector4d::set( KsReal xf, KsReal yf, KsReal zf, KsReal wf )
{
	x = xf;
	y = yf;
	z = zf;
	w = wf;
}
//===============================================================================================//
// ílÇÉZÉbÉgÇ∑ÇÈ
//===============================================================================================//
inline void KsVector4d::set( const KsReal* fArray )
{
	x = fArray[ 0 ];
	y = fArray[ 1 ];
	z = fArray[ 2 ];
	w = fArray[ 3 ];
}
//===============================================================================================//
//Å@éwíËÇ≥ÇÍÇΩí∑Ç≥ÇÃÉxÉNÉgÉãÇ…ïœçXÇ∑ÇÈ
//===============================================================================================//
inline void KsVector4d::scaleTo( KsReal len )
{
	KsReal	len2 = length2();

	if( (len2 > ksTOLERANCE) && (KsFabs( len2 - (len*len) ) > ksTOLERANCE) )
	{
		KsReal	factor = ( len / KsSqrt( len2 ) );

		x *= factor;
		y *= factor;
		z *= factor;
		w *= factor;
	}
}
//===============================================================================================//
// 0.0fÇ≈ÉäÉZÉbÉgÇ∑ÇÈ
//===============================================================================================//
inline void KsVector4d::reset()
{
	x = y = z = w =0.0f;
}

//===============================================================================================//
// í∑Ç≥ÇãÅÇﬂÇÈ
//===============================================================================================//
inline KsReal KsVector4d::length()
{
	return KsSqrt( x*x + y*y + z*z + w*w );
}
//===============================================================================================//
// í∑Ç≥ÇÃ2èÊÇãÅÇﬂÇÈ
//===============================================================================================//
inline KsReal KsVector4d::length2()
{
	return ( x*x + y*y + z*z + w*w );
}
//===============================================================================================//
// ê≥ãKâª
//===============================================================================================//
inline void KsVector4d::normalize()
{
	KsReal	norm = x*x + y*y + z*z;

	if( ( KsFabs( norm - 1.0f ) < ksTOLERANCE ) || ( norm < ksTOLERANCE2 ) ){
		return;
	}

	KsReal invNorm = 1.0f / KsSqrt( norm );

	x *= invNorm;
	y *= invNorm;
	z *= invNorm;
	w *= invNorm;
}
//===============================================================================================//
// ì‡êœ
//===============================================================================================//
inline KsReal KsVector4d::dotProduct( const KsVector4d& refVector ) const
{
	return ( x*refVector.x + y*refVector.y + z*refVector.z + w*refVector.w );
}


