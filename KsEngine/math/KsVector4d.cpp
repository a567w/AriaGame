/************************************************************************************************/
/**
 * @file KsVector.cpp
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"
#include "KsVector.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

// ゼロベクトル
const KsVector4d KsVector4d::ZERO( 0.0f, 0.0f, 0.0f, 0.0f );

// 1 ベクトル
const KsVector4d KsVector4d::ONE( 1.0f, 1.0f, 1.0f, 1.0f );

// 0.5 ベクトル
const KsVector4d KsVector4d::HALF( 0.5f, 0.5f, 0.5f, 0.5f );

// 最大値
const KsVector4d KsVector4d::MAX( ksFLT_MAX, ksFLT_MAX, ksFLT_MAX, ksFLT_MAX );

// 最小値
const KsVector4d KsVector4d::MIN( -ksFLT_MAX, -ksFLT_MAX, -ksFLT_MAX, -ksFLT_MAX );

// V1100 ベクトル
const KsVector4d KsVector4d::VECTOR_1100( 1.0f, 1.0f, 0.0f, 0.0f );

/************************************************************************************************/
/*
 * 最初の 2 つのベクトルの積を、3 番目のベクトルに加算します。
 */
/************************************************************************************************/
KsVector4d KsVector4d::MultiplyAdd( const KsVector4d& V1, const KsVector4d& V2, const KsVector4d& V3 )
{
	KsVector4d	ret;

	ret.x = V1.x * V2.x + V3.x;
	ret.y = V1.y * V2.y + V3.y;
	ret.z = V1.z * V2.z + V3.z;
	ret.w = V1.w * V2.w + V3.w;
	
	return ret;
}

/************************************************************************************************/
/*
 * 2 つのベクトルの最大値を取得する
 */
/************************************************************************************************/
KsVector4d KsVector4d::Max( const KsVector4d& V1, const KsVector4d& V2 )
{
	KsVector4d	ret;

	ret.x = V1.x > V2.x ? V1.x : V2.x;
	ret.y = V1.y > V2.y ? V1.y : V2.y;
	ret.z = V1.z > V2.z ? V1.z : V2.z;
	ret.w = V1.w > V2.w ? V1.w : V2.w;
	
	return ret;
}


