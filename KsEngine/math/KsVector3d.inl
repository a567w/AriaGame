/************************************************************************************************/
/*                                                                                              */
/*                           << KsVector3d クラスのインライン関数 >>                            */
/*                                                                                              */
/************************************************************************************************/

/************************************************************************************************/
/*
 * 配列内の値を返す
 */
/************************************************************************************************/
inline KsReal& KsVector3d::operator [] ( KsInt32 index )
{
	return( ( (KsReal*)&x )[ index ] );
}

/************************************************************************************************/
/*
 * 配列内の値を返す
 */
/************************************************************************************************/
inline const KsReal& KsVector3d::operator [] ( KsInt32 index ) const
{
	return( ( (KsReal*)&x )[ index ] );
}
/************************************************************************************************/
// = 演算子 (代入)
/************************************************************************************************/
inline const KsVector3d& KsVector3d::operator = ( const KsVector3d &refVector )
{
	x = refVector.x;
	y = refVector.y;
	z = refVector.z;

	return( *this );
}
/************************************************************************************************/
// += 演算子
/************************************************************************************************/
inline KsVector3d& KsVector3d::operator += ( const KsVector3d& refVector )
{
	x += refVector.x;
	y += refVector.y;
	z += refVector.z;

	return	(*this);
}
/************************************************************************************************/
// -= 演算子
/************************************************************************************************/
inline KsVector3d& KsVector3d::operator -= ( const KsVector3d& refVector )
{
	x -= refVector.x;
	y -= refVector.y;
	z -= refVector.z;

	return	(*this);
}
/************************************************************************************************/
//  *= 演算子
/************************************************************************************************/
inline KsVector3d& KsVector3d::operator *= ( KsReal s )
{
	x *= s;
	y *= s;
	z *= s;

	return	(*this);
}
/************************************************************************************************/
//  /= 演算子
/************************************************************************************************/
inline KsVector3d& KsVector3d::operator /= ( KsReal s )
{
	if( s < ksTOLERANCE ){
		return (*this);
	}

	x /= s;
	y /= s;
	z /= s;

	return	(*this);
}
/************************************************************************************************/
// + 演算子(加算)
/************************************************************************************************/
inline KsVector3d KsVector3d::operator + () const 
{
	return ( *this );
}

/************************************************************************************************/
// - 演算子(減算)
/************************************************************************************************/
inline KsVector3d KsVector3d::operator - () const 
{
	return KsVector3d( -x, -y, -z );
}
/************************************************************************************************/
// + 演算子(加算)
/************************************************************************************************/
inline KsVector3d KsVector3d::operator + ( const KsVector3d& refVector ) const 
{
	return KsVector3d( x + refVector.x, y + refVector.y, z + refVector.z );
}
/************************************************************************************************/
// - 演算子(減算)
/************************************************************************************************/
inline KsVector3d KsVector3d::operator - ( const KsVector3d& refVector ) const 
{
	return KsVector3d( x - refVector.x, y - refVector.y, z - refVector.z );
}
/************************************************************************************************/
// * 演算子(掛算) 
/************************************************************************************************/
inline KsVector3d KsVector3d::operator * ( KsReal s ) const 
{
	return KsVector3d( s*x, s*y, s*z );
}
/************************************************************************************************/
// / 演算子(割算)
/************************************************************************************************/
inline KsVector3d KsVector3d::operator / ( KsReal s ) const 
{
	if( KsFabs( s ) < ksTOLERANCE ){
		KsVector3d( x, y, z );
	}

	return KsVector3d( x/s, y/s, z/s );
}

/************************************************************************************************/
// == 演算子(比較)
/************************************************************************************************/
inline KsBool KsVector3d::operator == ( const KsVector3d& refVector ) const 
{
	return ( ( KsFabs( x - refVector.x ) < ksTOLERANCE ) && ( KsFabs( y - refVector.y ) < ksTOLERANCE ) && ( KsFabs( z - refVector.z ) < ksTOLERANCE ) );
}

/************************************************************************************************/
// != 演算子(比較)
/************************************************************************************************/
inline KsBool KsVector3d::operator != ( const KsVector3d& refVector ) const 
{
	return ( ( KsFabs( x - refVector.x ) > ksTOLERANCE ) || ( KsFabs( y - refVector.y ) > ksTOLERANCE ) || ( KsFabs( z - refVector.z ) > ksTOLERANCE ) );
}

/************************************************************************************************/
// 値をセットする
/************************************************************************************************/
inline void KsVector3d::set( KsReal xf, KsReal yf, KsReal zf )
{
	x = xf;
	y = yf;
	z = zf;
}

/************************************************************************************************/
// 値をセットする
/************************************************************************************************/
inline void KsVector3d::set( const KsReal* fArray )
{
	x = fArray[ 0 ];
	y = fArray[ 1 ];
	z = fArray[ 2 ];
}

/************************************************************************************************/
//　指定された長さのベクトルに変更する
/************************************************************************************************/
inline void KsVector3d::scaleTo( KsReal len )
{
	KsReal	len2 = length2();

	if( (len2 > ksTOLERANCE) && (KsFabs( len2 - (len*len) ) > ksTOLERANCE) )
	{
		KsReal	factor = ( len / KsSqrt( len2 ) );

		x *= factor;
		y *= factor;
		z *= factor;
	}
}

/************************************************************************************************/
// 0.0fでリセットする
/************************************************************************************************/
inline void KsVector3d::reset()
{
	x = y = z = 0.0f;
}

/************************************************************************************************/
// 長さを求める
/************************************************************************************************/
inline KsReal KsVector3d::length()
{
	return KsSqrt( x*x + y*y + z*z );
}

/************************************************************************************************/
// 長さの2乗を求める
/************************************************************************************************/
inline KsReal KsVector3d::length2()
{
	return ( x*x + y*y + z*z );
}

/************************************************************************************************/
// 正規化
/************************************************************************************************/
inline void KsVector3d::normalize()
{
	const KsReal	norm = x*x + y*y + z*z;

	if( ( KsFabs( norm - 1.0f ) < ksTOLERANCE ) || ( norm < ksTOLERANCE2 ) )
	{
		x = 0.0f;
		y = 0.0f;
		z = 0.0f;
		return;
	}

	const KsReal invNorm = 1.0f / KsSqrt( norm );

	x *= invNorm;
	y *= invNorm;
	z *= invNorm;
}

/************************************************************************************************/
// 内積
/************************************************************************************************/
inline KsReal KsVector3d::dotProduct( const KsVector3d& refVector ) const
{
	return ( x*refVector.x + y*refVector.y + z*refVector.z );
}
/************************************************************************************************/
// 外積
/************************************************************************************************/
inline KsVector3d KsVector3d::crossProduct( const KsVector3d& refVector )
{
	return KsVector3d( (y*refVector.z - z*refVector.y), (z*refVector.x - x*refVector.z), (x*refVector.y - y*refVector.x) );
}

/************************************************************************************************/
/*                                                                                              */
/*                                   << インライン関数 >>                                       */
/*                                                                                              */
/************************************************************************************************/

/************************************************************************************************/
/**
 * 内積
 * @param	refV0				内積するベクトル
 * @param	refV1				内積するベクトル
 * @return						内積結果スカラー値
 */
/************************************************************************************************/
inline KsReal KsDotProduct( const KsVector3d& refV0, const KsVector3d& refV1 )
{
	return ( refV0.x*refV1.x + refV0.y*refV1.y + refV0.z*refV1.z );
}

/************************************************************************************************/
/**
 * 内積
 * @param	pV0					内積するベクトルのポインタ
 * @param	pV1					内積するベクトルのポインタ
 * @return						内積結果スカラー値
 */
/************************************************************************************************/
inline KsReal KsDotProduct( const KsVector3d* pV0, const KsVector3d*  pV1 )
{
	return ( pV0->x*pV1->x + pV0->y*pV1->y + pV0->z*pV1->z );
}

/************************************************************************************************/
/**
 * 外積
 * @param	refVector			外積するベクトル
 * @param	refVector			外積するベクトル
 * @return						外積結果のベクトル
 */
/************************************************************************************************/
inline KsVector3d	KsCrossProduct( const KsVector3d& refVector1, const KsVector3d& refVector2 )
{
	return KsVector3d(	( refVector1.y*refVector2.z - refVector1.z*refVector2.y ),
						( refVector1.z*refVector2.x - refVector1.x*refVector2.z ),
						( refVector1.x*refVector2.y - refVector1.y*refVector2.x ) );
}

/************************************************************************************************/
/**
 * 外積
 * @param	pOutVector			外積結果のベクトルのポインタ
 * @param	pV0					外積するベクトルのポインタ
 * @param	pV1					外積するベクトルのポインタ				
 * @return						外積結果のベクトルのポインタ
 */
/************************************************************************************************/
inline KsVector3d*	KsCrossProduct( KsVector3d* pOutVector, const KsVector3d*  pV0, const KsVector3d* pV1 )
{
	pOutVector->x = pV0->y*pV1->z - pV0->z*pV1->y;
	pOutVector->y = pV0->z*pV1->x - pV0->x*pV1->z;
	pOutVector->z = pV0->x*pV1->y - pV0->y*pV1->x;

	return pOutVector;
}




