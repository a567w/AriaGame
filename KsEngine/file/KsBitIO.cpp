/************************************************************************************************/
/**
 * @file		KsBitIO.cpp
 * @brief		ビット操作
 * @author		Tsukasa Kato
 * @date		2004/03/30
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/



/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsBitIO::KsBitIO()
{
	clear();
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsBitIO::clear()
{
	m_pFile   = NULL;
	m_pBuffer = NULL;
	m_flags   = 0;
	m_index   = 0;
	m_count   = 0;
	m_mask    = 1;		// 下位ビットを立てる
	m_size    = 0;
	m_useFile = 0;
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsBitIO::KsBitIO( FILE* pFile )
{
	create( pFile );
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
KsBitIO::KsBitIO( KsByte* pBuffer )
{
	create( pBuffer );
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsBitIO::create( FILE* pFile )
{
	clear();
	m_pFile   = pFile;
	m_useFile = ksTRUE;
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsBitIO::create( KsByte* pBuffer )
{
	clear();
	m_pBuffer = pBuffer;
	m_useFile = ksFALSE;
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsBitIO::pushFlag( KsByte bit )
{
	if( bit ){
		// ビットを立てる
		m_flags |= m_mask;
	}

	// ビットシフト
	m_mask <<= 1;
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsBitIO::pushData( KsByte data )
{
	m_data[ m_count++ ] = data;
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsBitIO::output()
{
	// マスクリセット
	if( !m_mask )
	{
		// フラグを書き出す
		if( m_useFile )
		{
			putc( m_flags, m_pFile );
			m_size++;

			for( KsUInt32 i=0; i<m_count; i++ )
			{
				putc( m_data[ i ], m_pFile );
				m_size++;
			}
		}
		else
		{
			*( m_pBuffer + m_index++ ) = m_flags;
			m_size++;

			for( KsUInt32 i=0; i<m_count; i++ )
			{
				*( m_pBuffer + m_index++ ) = m_data[ i ];
				m_size++;
			}
		}

		m_mask  = 1;	// 最上位ビットを立てる
		m_flags = 0;
		m_count = 0;
	}
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsBitIO::outputAll()
{
	// 残りのデータを書き出して終了コード(flag bit 0で一致長が0)を書き出す
	KsUInt32	i;

	if( m_count )
	{
		// フラグを書き出す
		if( m_useFile )
		{
			putc( m_flags, m_pFile );
			m_size++;

			for( i=0; i<m_count; i++ )
			{
				putc( m_data[ i ], m_pFile );
				m_size++;
			}
			// 終了コード
			putc( 0x00, m_pFile );
			m_size++;
			putc( 0x00, m_pFile );
			m_size++;
		}
		else
		{
			*( m_pBuffer + m_index++ ) = m_flags;
			m_size++;

			for( i=0; i<m_count; i++ )
			{
				*( m_pBuffer + m_index++ ) = m_data[ i ];
				m_size++;
			}
			// 終了コード
			*( m_pBuffer + m_index++ ) = 0x00;
			m_size++;
			*( m_pBuffer + m_index++ ) = 0x00;
			m_size++;
		}
	}
	else
	{
		// フラグを書き出す
		if( m_useFile )
		{
			// 圧縮フラグ
			putc( 0x00, m_pFile );
			m_size++;
			// 終了コード
			putc( 0x00, m_pFile );
			m_size++;
			putc( 0x00, m_pFile );
			m_size++;
		}
		else
		{
			// 圧縮フラグ
			*( m_pBuffer + m_index++ ) = 0x00;
			m_size++;
			// 終了コード
			*( m_pBuffer + m_index++ ) = 0x00;
			m_size++;
			*( m_pBuffer + m_index++ ) = 0x00;
			m_size++;
		}
	}

	m_mask  = 1;	// 最上位ビットを立てる
	m_flags = 0;
	m_count = 0;
}


