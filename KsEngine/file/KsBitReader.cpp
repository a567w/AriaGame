/************************************************************************************************/
/** 
 * @file		KsBitReader.cpp
 * @brief		KsBitReader
 * @author		Tsukasa Kato
 * @date		2005/10/17
 * @since		2005/10/17
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                            */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/************************************************************************************************/
/* 
 *
 */
/************************************************************************************************/
KsBitReader::KsBitReader()
	: m_pBuffer( 0 )
	, m_sBufferSizeBit( 0 )
	, m_sTotalReadBit( 0 )
	, m_size( 0 )
	, m_pos( 0 )
	, m_buf( 0 )
	, m_bits( 0 )
{
}

/************************************************************************************************/
/* 
 *
 */
/************************************************************************************************/
KsBitReader::KsBitReader( const KsByte* pBuffer, KsInt32 size )
	: m_pBuffer( 0 )
	, m_sBufferSizeBit( 0 )
	, m_sTotalReadBit( 0 )
	, m_size( 0 )
	, m_pos( 0 )
	, m_buf( 0 )
	, m_bits( 0 )
{
	setup( pBuffer, size );
}

/************************************************************************************************/
/* 
 *
 */
/************************************************************************************************/
void KsBitReader::setup( const KsByte* pBuffer, KsInt32 size )
{
	m_pBuffer = pBuffer;
	m_sBufferSizeBit = size * 8;
	m_sTotalReadBit = 0;
	m_size = size;
	m_pos = 0;
	m_buf = 0;
	m_bits = 0;
}

/************************************************************************************************/
/* 
 *
 */
/************************************************************************************************/
KsBitReader::~KsBitReader()
{

}

/************************************************************************************************/
/* 
 *
 */
/************************************************************************************************/
KsUInt32 KsBitReader::readUInt32( KsUInt8 uReadBit )
{
#if 0
	if( m_uReadBit + uReadBit > m_uBufferSizeBit )
	{
		return 0;
	}

	KsUInt32	uReadByte = m_uReadBit / 8;

	//m_pBuffer[ uReadByte ];

	m_uReadBit += uReadBit;
#endif
	return 0;
}

/************************************************************************************************/
/* 
 *
 */
/************************************************************************************************/
KsInt32 KsBitReader::readInt32( KsUInt8 uReadBit )
{
	return 0;
}

/************************************************************************************************/
/* 
 *
 */
/************************************************************************************************/
KsUInt8 KsBitReader::getByte()
{
	if( m_pos + 1 > m_size )
	{
		m_pos = m_size + 1;

		return 0;
	}

	return m_pBuffer[ m_pos++ ];
}

/************************************************************************************************/
/* 
 *
 */
/************************************************************************************************/
KsLong KsBitReader::getNBitInt( KsInt32 n, KsBool is_signed )
{
	KsInt32	orig_n = n;
	KsLong		r = m_buf;

	if( n == m_bits )
	{
		m_bits = m_buf = 0;
		goto label_ret;
	}

	if( n > m_bits )
	{
		n -= m_bits;
		
		while( n > 8 )
		{
			r <<= 8;
			r += getByte();
			n-=8;
		}
		m_buf = getByte();
		
		if( n > 0 ) {
			r <<= n;
			m_bits = 8-n;

			r += m_buf >> (8-n);
			m_buf &= (1<<m_bits)-1;
		}
		goto label_ret;
	}
		
	r = m_buf >> (m_bits-n);
	m_bits -= n;
	m_buf &= (1<<m_bits)-1;
	
label_ret:	

	KsLong sign = (1<<(orig_n-1));

	if( is_signed && ( r & sign ) != 0 )
	{
		r |= - (KsLong) sign;
	}
	
	m_sTotalReadBit += n;

	return r;
}


/*
 * バイトアラインメンとする
 */
void KsBitReader::byteAlign()
{
	KsInt32	sAlignBit = m_sTotalReadBit % 8;

	if( sAlignBit )
	{
		m_sTotalReadBit += ( 8 - sAlignBit );
	}
}



/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsFileBitReader::KsFileBitReader()
	: m_pFile( 0 )
	, m_pBuffer( 0 )
	, m_sBufferSizeBit( 0 )
	, m_sTotalReadBit( 0 )
	, m_size( 0 )
	, m_pos( 0 )
	, m_data( 0 )
	, m_bits( 0 )
{
}

/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsFileBitReader::KsFileBitReader( const KsChar* pFileName )
	: m_pFile( 0 )
	, m_pBuffer( 0 )
	, m_sBufferSizeBit( 0 )
	, m_sTotalReadBit( 0 )
	, m_size( 0 )
	, m_pos( 0 )
	, m_data( 0 )
	, m_bits( 0 )
{
	m_pFile = new KsFileBuffer( pFileName, ksFILE_FLAG_DEFAULT );
}

/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsFileBitReader::KsFileBitReader( const KsByte* pBuffer, KsInt32 size )
	: m_pFile( 0 )
	, m_pBuffer( 0 )
	, m_sBufferSizeBit( 0 )
	, m_sTotalReadBit( 0 )
	, m_size( 0 )
	, m_pos( 0 )
	, m_data( 0 )
	, m_bits( 0 )
{
}

/************************************************************************************************/
/*
 * デストラクタ
 */
/************************************************************************************************/
KsFileBitReader::~KsFileBitReader()
{
	ksDELETE( m_pFile );
}

/************************************************************************************************/
/* 
 *
 */
/************************************************************************************************/
KsUInt8 KsFileBitReader::getByte()
{
	/*
	if( m_pos + 1 > m_size )
	{
		m_pos = m_size + 1;

		return 0;
	}

	return m_pBuffer[ m_pos++ ];
	*/
	return m_pFile->readUInt8();
}

/************************************************************************************************/
/*
 * ビット数分読み込む
 * @param	n				読み込むビット数
 * @param	bIsSigned		符号ありかどうかのフラグ
 * @return					指定ビット数分の整数値
 */
/************************************************************************************************/
KsInt32 KsFileBitReader::readBit( KsInt32 n, KsBool bIsSigned )
{
	KsInt32	orig_n = n;
	KsInt32	r = m_data;

	if( n == m_bits )
	{
		m_bits = 0;
		m_data = 0;
		
		goto LABEL_RET;
	}

	if( n > m_bits )
	{
		n -= m_bits;
		
		while( n > 8 )
		{
			r <<= 8;
			r += getByte();
			n -= 8;
		}

		m_data = getByte();
		
		if( n > 0 )
		{
			r <<= n;
			m_bits = 8-n;

			r += m_data >> (8-n);
			m_data &= (1<<m_bits)-1;
		}
		goto LABEL_RET;
	}
		
	r = m_data >> (m_bits-n);
	m_bits -= n;
	m_data &= (1<<m_bits)-1;
	
LABEL_RET:	

	KsInt32	sign = (1<<(orig_n-1));

	if( bIsSigned && ( r & sign ) != 0 )
	{
		r |= - (KsInt32) sign;
	}
	
	m_sTotalReadBit += n;

	return r;
}

/************************************************************************************************/
/*
 * バイトアラインメンとする
 */
/************************************************************************************************/
void KsFileBitReader::byteAlign()
{
	KsInt32	sAlignBit = m_sTotalReadBit % 8;

	if( sAlignBit )
	{
		m_sTotalReadBit += ( 8 - sAlignBit );
	}
}

/************************************************************************************************/
/*
 * ファイルから浮動小数点の値を読み込む
 * @return					浮動小数点の値
 */
/************************************************************************************************/
KsReal KsFileBitReader::readReal()
{
	/* バイトアラインメントしておく */
	byteAlign();

	return m_pFile->readReal();
}

/************************************************************************************************/
/*
 * ファイルから32bit整数値を読み込む
 * @return					32bit整数値
 */
/************************************************************************************************/
KsInt32 KsFileBitReader::readInt32()
{
	/* バイトアラインメントしておく */
	byteAlign();

	return m_pFile->readInt32();
}

/************************************************************************************************/
/*
 * ファイルから符号なし32bit整数値を読み込む
 * @return					符号なし32bit整数値
 */
/************************************************************************************************/
KsUInt32 KsFileBitReader::readUInt32()
{
	/* バイトアラインメントしておく */
	byteAlign();

	return m_pFile->readUInt32();
}

/************************************************************************************************/
/*
 * ファイルから16bit整数値を読み込む
 * @return					16bit整数値
 */
/************************************************************************************************/
KsInt16 KsFileBitReader::readInt16()
{
	/* バイトアラインメントしておく */
	byteAlign();

	return m_pFile->readInt16();
}

/************************************************************************************************/
/*
 * ファイルから符号なし16bit整数値を読み込む
 * @return					符号なし16bit整数値
 */
/************************************************************************************************/
KsUInt16 KsFileBitReader::readUInt16()
{
	/* バイトアラインメントしておく */
	byteAlign();

	return m_pFile->readUInt16();
}

/************************************************************************************************/
/*
 * ファイルから8bit整数値を読み込む
 * @return					8bit整数値
 */
/************************************************************************************************/
KsInt8 KsFileBitReader::readInt8()
{
	/* バイトアラインメントしておく */
	byteAlign();

	return m_pFile->readInt8();
}

/************************************************************************************************/
/*
 * ファイルから符号なし8bit整数値を読み込む
 * @return					符号なし8bit整数値
 */
/************************************************************************************************/
KsUInt8 KsFileBitReader::readUInt8()
{
	/* バイトアラインメントしておく */
	byteAlign();

	return m_pFile->readUInt8();
}

/************************************************************************************************/
/*
 * バッファに指定バイト数分読み込む
 * @param	pBuffer			(OUT)読み込むためのバッファ
 * @param	count			読み込むバイト数
 * @return					読み込んだバイト数
 */
/************************************************************************************************/
KsSize KsFileBitReader::read( void *pBuffer, KsInt32 count )
{
	/* バイトアラインメントしておく */
	byteAlign();

	return m_pFile->read( pBuffer, count );
}


