/************************************************************************************************/
/** 
 * @file		KsFilePack.cpp
 * @brief		ファイルパック
 * @author		Tsukasa Kato
 * @date		2004/11/24
 * @since		2004/11/24
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                            */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/


/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsFilePack::KsFilePack()
{
	KsZeroMemory( &m_header, sizeof(KsFilePackHeader) );

	m_pInfoList = NULL;
	m_pData     = NULL;
}

/************************************************************************************************/
/*
 * デストラクタ
 */
/************************************************************************************************/
KsFilePack::~KsFilePack()
{
	destroy();
}

/************************************************************************************************/
/*
 * 最初にデータを読み込んでパック検索データを生成する
 * @param	fullPath		ファイルオ名
 * @retval	ksTRUE			生成成功
 * @retval	ksFALSE			生成失敗
 */
/************************************************************************************************/
KsBool KsFilePack::createFromFile( const KsString& fullPath )
{
	KsFileBuffer	file( fullPath, ksREAD );

	return create( &file );
}

/************************************************************************************************/
/*
 * 最初にデータを読み込んでパック検索データを生成する
 * @param	pFile			ファイルオブジェクト
 * @retval	ksTRUE			生成成功
 * @retval	ksFALSE			生成失敗
 */
/************************************************************************************************/
KsBool KsFilePack::create( KsFileObject* pFile )
{
	// ヘッダー読み込み
	pFile->read( &m_header, sizeof(KsFilePackHeader) );

	m_pInfoList = ksNew KsFilePackInfo[ m_header.NumFiles ];
	m_pData     = ksNew KsByte[ m_header.TotalSize ];

	// 情報部 読み込み
	pFile->read( &m_pInfoList[ 0 ], sizeof(KsFilePackInfo) * m_header.NumFiles );

	// データ部 読み込み
	pFile->read( &m_pData[ 0 ], sizeof(KsByte) * m_header.TotalSize );

	return ksTRUE;
}

/************************************************************************************************/
/*
 * 破棄する
 */
/************************************************************************************************/
void KsFilePack::destroy()
{
	ksDELETEARRAY( m_pInfoList );
	ksDELETEARRAY( m_pData );
}

/************************************************************************************************/
/*
 * ファイルを数を取得する
 * @return					ファイル数
 */
/************************************************************************************************/
KsUInt32 KsFilePack::getNumFile()
{
	return m_header.NumFiles;
}

/************************************************************************************************/
/*
 * ファイルを取得する
 * @param		index		インデックス
 * @return					ファイル情報
 */
/************************************************************************************************/
KsFilePackInfo* KsFilePack::getInfo( KsUInt32 index )
{
	if( m_header.NumFiles <= index )
	{
		return NULL;
	}

	if( NULL == m_pInfoList )
	{
		return NULL;
	}

	return &m_pInfoList[ index ];
}

/************************************************************************************************/
/*
 * ファイルを取得する
 * @param		index		インデックス
 * @return					ファイルデータ
 */
/************************************************************************************************/
KsByte* KsFilePack::getData( KsUInt32 index )
{
	if( m_header.NumFiles <= index )
	{
		return NULL;
	}

	if( NULL == m_pInfoList )
	{
		return NULL;
	}

	if( NULL == m_pData )
	{
		return NULL;
	}

	const KsUInt32 offset = m_pInfoList[ index ].DataOffset;

	return &m_pData[ offset ];
}

