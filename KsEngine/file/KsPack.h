/************************************************************************************************/
/** 
 * @file		KsPack.h
 * @brief		パック
 * @author		Tsukasa Kato
 * @date		2004/11/24
 * @since		2004/11/24
 * @version		1.0.0
 */
/************************************************************************************************/
#ifndef __KSPACK_H__
#define __KSPACK_H__

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/
#define ksPACK_MAGIC_CODE			ksMAKE_DWORD( '@','P','A','K' )	/**< ファイル識別用文字		*/
#define ksPACK_FILE_NAME_LENGTH		( 128 )							/**< 最大ファイルネーム長		*/
#define ksCOMPRESSION_TYPE_LZSS		( 1 )							/**< 圧縮タイプ				*/
#define ksPACK_FLAGS_COMPRESS_LZSS	( 1<< 0 )						/**< LZSS圧縮あり			*/
#define ksPACK_FLAGS_FILENAME_CRC	( 1<< 1 )						/**< ファイル名圧縮あり		*/
#define ksSECTOR_SIZE				( 2048 )						/**< セクタサイズ			*/

/*************************************************************************************************/
/**
 * パックファイルヘッダ構造体
 */
/*************************************************************************************************/
typedef struct _KsPackHeader
{
	KsUInt32			magic;								/**< 識別用(@PAK)					*/
	KsUInt32			flags;								/**< フラグ							*/
	KsUInt32			numFiles;							/**< ファイル数						*/
	KsUInt32			alignment;							/**< 何バイトアラインメント			*/

}KsPackHeader;

/*************************************************************************************************/
/**
 * パックファイル情報構造体2
 */
/*************************************************************************************************/
typedef struct _KsPackInfo2
{
	KsUInt32			flags;								/**< フラグ							*/
	KsUInt32			offset;								/**< オフセットアドレス				*/
	KsUInt32			realSize;							/**< 実際のサイズ					*/
	KsUInt32			compressedSize;						/**< 圧縮サイズ						*/
	KsUInt32			nameCRC1;							/**< ファイル名圧縮CRC1				*/
	KsUInt32			nameCRC2;							/**< ファイル名圧縮CRC2				*/
	KsUInt32			nameLength;							/**< ファイル名の長さ					*/

}KsPackInfo2;

#if 0
/************************************************************************************************/
/**
 * @class		KsPack
 * @brief		パックファイル構造
 * @author		Tsukasa Kato
 * @date		2004/03/30
 * @version		1.0.0
 */
/************************************************************************************************/
class KsPack
{
	public:
		/**
		 * コンストラクタ
		 */
											KsPack();

		/**
		 * デストラクタ
		 */
		virtual							~KsPack();

		/**
		 * 生成する
		 * 最初にデータを読み込んでパック検索データを生成する
		 */
		KsBool								create( const KsChar* pPackName );

		/**
		 * 破棄する
		 */
		void								destroy();

		/**
		 * ファイルを検索する
		 * @param		pFileName			ファイル名
		 */
		KsPackInfo2*						find( const KsChar* pFileName );

		/**
		 * ファイル探索(２分探索)
		 * @param		key					検索キー
		 * @return							インデックス
		 */
		KsInt32								binarySearch( KsUInt32 key );

		/**
		 * ファイルを開くする
		 */
		KsBool								open();

		/**
		 * 閉じる
		 */
		void								close();

	public:
		KsChar								m_path[ ksPATH_MAX ];		/**< パス					*/
		KsInt32								m_topSector;				/**< 先頭のセクタ			*/
		KsPackHeader						m_header;					/**< パックのヘッダー			*/
		KsPackInfo2*						m_pInfoList;				/**< パック情報のリスト		*/
};
#endif

#endif /* __KSPACK_H__ */


