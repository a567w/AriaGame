/************************************************************************************************/
/**
 * @file		KsBitIO.h
 * @brief		ビット操作
 * @author		Tsukasa Kato
 * @date		2004/03/30
 * @version		1.0.0
 */
/************************************************************************************************/
#ifndef __KSBITIO_H__
#define __KSBITIO_H__

/*==============================================================================================*/
/*                                 << インクルード >>                                            */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/************************************************************************************************/
/**
 * @class		KsBitIO
 * @brief		ビット操作
 * @author		Tsukasa Kato
 * @date		2004/03/30
 * @version		1.0.0
 */
/************************************************************************************************/
class ksENGINE_API KsBitIO
{
	public:
		/**
		 * コンストラクタ
		 */
										KsBitIO();

		/**
		 * コンストラクタ
		 * @param		pFile			ファイルポインタ
		 */
										KsBitIO( FILE* pFile );

		/**
		 * コンストラクタ
		 * @param		pBuffer			バッファ
		 */
										KsBitIO( KsByte* pBuffer );

		/**
		 * デストラクタ
		 */
										~KsBitIO(){}

		/**
		 * 生成
		 * @param		pFile			ファイルポインタ
		 */
		void							create( FILE* pFile );

		/**
		 * 生成
		 * @param		pBuffer			バッファ
		 */
		void							create( KsByte* pBuffer );

		/**
		 * クリア
		 */
		void							clear();

		/**
		 * フラグをセット
		 * @param		flag			フラグ
		 */
		void							pushFlag( KsByte flag );

		/**
		 * データをセット
		 * @param		data			データ
		 */
		void							pushData( KsByte data );

		/**
		 * 書き出し
		 */
		void							output();

		/**
		 * すべて書き出し
		 */
		void							outputAll();

		/**
		 * 圧縮サイズを取得する
		 * @param						圧縮サイズ
		 */
		KsUInt32						getSize() const { return m_size; }

	private:
		KsBool							m_useFile;			/**< ファイルを使っているか？	*/
		KsByte*							m_pBuffer;			/**< バッファ					*/
		FILE*							m_pFile;			/**< ファイルポインタ			*/
		KsUInt32						m_count;			/**< データカウント				*/
		KsUInt32						m_size;				/**< 圧縮サイズ					*/
		KsUInt32						m_index;			/**< インデックス				*/
		KsByte							m_mask;				/**< マスク						*/
		KsByte							m_flags;			/**< フラグ						*/
		KsByte							m_data[ 16 ];		/**< データ保存用バッファ		*/
};


#endif		/* __KSBITIO_H__ */
