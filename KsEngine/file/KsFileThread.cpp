/************************************************************************************************/
/** 
 * @file		KsFileThread.cpp
 * @brief		ファイルスレッド
 * @author		Tsukasa Kato
 * @date		2011/07/02
 * @since		2011/07/02
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/************************************************************************************************/
/*
 * ファイルスレッド生成
 */
/************************************************************************************************/
KsFileThread::KsFileThread( KsFileSystem* pFileSystem, ksTHREAD_PRIORITY_TYPE priority, KsUInt32 prosessor )
	: m_pFileSystem( pFileSystem )
	, m_priority( priority )
	, m_prosessor( prosessor )
	, m_bThreadLoop( ksFALSE )
{
	try
	{
		m_waitEvent = KsCreateEvent( ksTRUE, ksFALSE, _T("waitFileEvent") );
		m_syncEvent = KsCreateEvent( ksTRUE, ksFALSE, _T("syncFileEvent") );
	}
	catch( const KsChar* pszError )
	{
		/* エラー */
		KsError( pszError );
	}
}

/************************************************************************************************/
/*
 * デストラクタ
 */
/************************************************************************************************/
KsFileThread::~KsFileThread()
{
	// 終了させる
	m_bThreadLoop = ksFALSE;

	// スレッド終了待ちする
	join();

	KsCloseEvent( m_waitEvent );
	KsCloseEvent( m_syncEvent );
}

/************************************************************************************************/
/*
 * ファイルスレッドの処理を開始する。
 */
/************************************************************************************************/
KsBool KsFileThread::run()
{
	m_bThreadLoop = ksTRUE;

	/* スレッド開始する */
	start();

	return ksTRUE;
}

/************************************************************************************************/
/*
 * 同期まちをする
 */
/************************************************************************************************/
KsUInt32 KsFileThread::threadMain()
{
	setPriority( m_priority );
	setProcessor( m_prosessor );
	
	/* ゲームループ */
	while( m_bThreadLoop )
	{
		KsWaitEvent( m_waitEvent );
	
		m_pFileSystem->lock();
		
		m_pFileSystem->polling();
		
		m_pFileSystem->unlock();

		yield();
	}

	return 0;
}

/************************************************************************************************/
/*
 * ウエイトイベントをセットする
 */
/************************************************************************************************/
void KsFileThread::setWaitEvent()
{
	// ウエイトイベントをセットする
	KsSetEvent( m_waitEvent );
}

/************************************************************************************************/
/*
 * 同期イベントをセットする
 */
/************************************************************************************************/
void KsFileThread::setSyncEvent()
{
	// 同期イベントをセットする
	KsSetEvent( m_syncEvent );
}

/************************************************************************************************/
/*
 * ウエイトイベントをリセットする
 */
/************************************************************************************************/
void KsFileThread::resetWaitEvent()
{
	// ウエイトイベントをリセットする
	KsResetEvent( m_waitEvent );
}

/************************************************************************************************/
/*
 * 同期イベントをリセットする
 */
/************************************************************************************************/
void KsFileThread::resetSyncEvent()
{
	// 同期イベントをリセットする
	KsResetEvent( m_syncEvent );
}


