/************************************************************************************************/
/** 
 * @file		KsKeyFrame.cpp
 * @brief		キーフレームデータ
 * @author		Tsukasa Kato
 * @date		----/--/--
 * @since		----/--/--
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                            */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsKeyFrame::KsKeyFrame()
	: m_time( 0 )
	, m_scale( KsVector3d::ONE )
	, m_translate( KsVector3d::ZERO )
	, m_rotation( KsQuaternion::IDENTITY )
{
}

/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsKeyFrame::KsKeyFrame( const KsVector3d& translate, KsInt32 time )
	: m_time( time )
	, m_scale( KsVector3d::ONE )
	, m_translate( translate )
	, m_rotation( KsQuaternion::IDENTITY )
{
}

/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsKeyFrame::KsKeyFrame( const KsQuaternion& rotation, KsInt32 time )
	: m_time( time )
	, m_scale( KsVector3d::ONE )
	, m_translate( KsVector3d::ZERO )
	, m_rotation( rotation )
{
}

/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsKeyFrame::KsKeyFrame( const KsVector3d& translate, const KsQuaternion& rotation, const KsVector3d& scale, KsInt32 time )
	: m_time( time )
	, m_scale( scale )
	, m_translate( translate )
	, m_rotation( rotation )
{
}

/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsKeyFrame::KsKeyFrame( const KsVector3d& translate, const KsQuaternion& rotation, KsInt32 time )
	: m_time( time )
	, m_scale( KsVector3d::ONE )
	, m_translate( translate )
	, m_rotation( rotation )
{
}

/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsKeyFrame::KsKeyFrame( const KsMatrix4x4& transform, KsInt32 time )
	: m_time( time )
	, m_scale( KsVector3d::ONE )
	, m_translate( KsVector3d::ZERO )
	, m_rotation( KsQuaternion::IDENTITY )
	, m_transform( transform )
{
}

/************************************************************************************************/
/*
 * デストラクタ
 */
/************************************************************************************************/
KsKeyFrame::~KsKeyFrame()
{
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsKeyFrame::setBezierX( KsReal val0, KsReal val1, KsReal val2, KsReal val3 )
{
	m_bezierX.setup( val0, val1, val2, val3 );
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsKeyFrame::setBezierY( KsReal val0, KsReal val1, KsReal val2, KsReal val3 )
{
	m_bezierY.setup( val0, val1, val2, val3 );
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsKeyFrame::setBezierZ( KsReal val0, KsReal val1, KsReal val2, KsReal val3 )
{
	m_bezierZ.setup( val0, val1, val2, val3 );
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsKeyFrame::setBezierAngle( KsReal val0, KsReal val1, KsReal val2, KsReal val3 )
{
	m_bezierAngle.setup( val0, val1, val2, val3 );
}

