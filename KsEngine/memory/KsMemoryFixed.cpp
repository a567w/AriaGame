/************************************************************************************************/
/** 
 * @file		KsMemoryFixed.cpp
 * @brief		固定メモリ管理（フリーリスト）
 * @author		Tsukasa Kato
 * @date		----/--/--
 * @since		----/--/--
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/


/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsMemoryFixed::KsMemoryFixed()
	: m_pFreeList( 0 )
{
}

/************************************************************************************************/
/*
 * コンストラクタ
 * @param		elementSize		要素のサイズ
 * @param		numElement		要素数
 * @param		numBlock		ブロック数
 */
/************************************************************************************************/
KsMemoryFixed::KsMemoryFixed( KsUInt32 elementSize, KsUInt32 numElement, KsUInt32 numBlock )
	: m_memoryBlockList( elementSize, numElement, numBlock )
	, m_pFreeList( 0 )
{
}

/************************************************************************************************/
/*
 * クリアーする
 */
/************************************************************************************************/
void KsMemoryFixed::clear()
{
	m_pFreeList = NULL;
	m_memoryBlockList.clear();
}

/************************************************************************************************/
/*
 * 破棄する
 */
/************************************************************************************************/
void KsMemoryFixed::destroy()
{
	m_pFreeList = NULL;
	m_memoryBlockList.destroy();
}

/************************************************************************************************/
/*
 * メモリー確保
 */
/************************************************************************************************/
void* KsMemoryFixed::KsAlloc()
{
	if( m_pFreeList ){
		KsFreeList*		pTemp = m_pFreeList;
		m_pFreeList = pTemp->m_pNext;
		return pTemp;
	}

	return m_memoryBlockList.alloc();
}

/************************************************************************************************/
/*
 * メモリー開放 
 */
/************************************************************************************************/
void KsMemoryFixed::KsFree( void* ptr )
{
	KsFreeList*		pList = (KsFreeList*)ptr;

	pList->m_pNext = m_pFreeList;
	m_pFreeList    = pList;
}

/************************************************************************************************/
/*
 * 生成する
 * @param		elementSize		要素のサイズ
 * @param		numElement		要素数
 * @param		numBlock		ブロック数
 */
/************************************************************************************************/
void KsMemoryFixed::create( KsUInt32 elementSize, KsUInt32 numElement, KsUInt32 numBlock )
{
	m_memoryBlockList.create( elementSize, numElement, numBlock );
}
/************************************************************************************************/
/*
 * デストラクタ
 */
/************************************************************************************************/
KsMemoryFixed::~KsMemoryFixed()
{
	destroy();
}

/************************************************************************************************/
/*
 * このリストで確保されたメモリーかのチェック
 * @retval		ksTRUE			これで確保されたメモリ
 * @retval		ksFALSE			これ以外で確保されたメモリ
 */
/************************************************************************************************/
KsBool KsMemoryFixed::isMemory( void* ptr )
{
	return m_memoryBlockList.isBlockListMemory( ptr );
}


