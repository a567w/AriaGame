/************************************************************************************************/
/** 
 * @file		KsEvent.h
 * @brief		イベント処理
 * @author		Tsukasa Kato
 * @date		2004/08/17
 * @since		----/--/--
 * @version		1.0.0
 */
/************************************************************************************************/
#ifndef __KSEVENT_H__
#define __KSEVENT_H__

/*==============================================================================================*/
/*                                 << インクルード >>                                          */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/
#define ksWAIT_INFINITE		( INFINITE )

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/*************************************************************************************************/
/**
 * イベント生成
 * @param	bManualReset	リセットのタイプ
 * @param	bInitialState	初期状態
 * @param	pName			イベントオブジェクトの名前
 * @return	
 */
/*************************************************************************************************/
ksENGINE_API KsHandle KsCreateEvent( KsBool bManualReset, KsBool bInitialState, const KsChar* pName=NULL );

/*************************************************************************************************/
/**
 * イベントを破棄する
 */
/*************************************************************************************************/
ksENGINE_API void KsCloseEvent( KsHandle handle );

/*************************************************************************************************/
/**
 * イベントオブジェクトをシグナル状態にする。
 * @param	hEvent		イベントオブジェクトを示すハンドル。
 * @retval	ksTRUE		成功
 * @retval	ksFALSE		失敗
 */
/*************************************************************************************************/
ksENGINE_API  KsBool KsSetEvent( KsHandle hEvent );

/*************************************************************************************************/
/**
 * イベントオブジェクトを非シグナル状態にする。
 * @param	hEvent		イベントオブジェクトを示すハンドル。
 * @retval	ksTRUE		成功
 * @retval	ksFALSE		失敗
 */
/*************************************************************************************************/
ksENGINE_API KsBool KsResetEvent( KsHandle hEvent );

/*************************************************************************************************/
/**
 * 指定されたカーネルオブジェクトがシグナル状態になるか、
 * 指定された時間が経過するまでスレッドをスリープさせます。
 * @param	handle			オブジェクトハンドル
 * @param	milliseconds	待ち時間をミリ秒単位
 * @return					状態
 */
/*************************************************************************************************/
ksENGINE_API KsUInt32 KsWaitEvent( KsHandle handle, KsUInt32 milliseconds=ksWAIT_INFINITE );

/*************************************************************************************************/
/*
 * 指定されたカーネルオブジェクトがシグナル状態になるか、
 * 指定された時間が経過するまでスレッドをスリープさせます。
 * @param	count			配列内のハンドルの数
 * @param	pHandles		オブジェクトハンドルからなる配列
 * @param	waitAll			待機オプション
 * @param	milliseconds	待ち時間をミリ秒単位
 * @return					状態
 */
/*************************************************************************************************/
ksENGINE_API KsUInt32 KsWaitEventForMultiple( KsUInt32 count, const HANDLE* pHandles, KsBool waitAll=ksTRUE, KsUInt32 milliseconds=ksWAIT_INFINITE );

#endif /* __KSEVENT_H__ */

