/************************************************************************************************/
/** 
 * @file		KsEvent.cpp
 * @brief		イベント処理
 * @author		Tsukasa Kato
 * @date		2004/08/17
 * @since		----/--/--
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                          */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/*************************************************************************************************/
/*
 * イベント生成
 * @param	bManualReset	リセットのタイプ
 * @param	bInitialState	初期状態
 * @param	pName			イベントオブジェクトの名前
 * @return	イベントオブジェクトのハンドル。
 */
/*************************************************************************************************/
KsHandle KsCreateEvent( KsBool bManualReset, KsBool bInitialState, const KsChar* pName )
{
	return ::CreateEvent( NULL, bManualReset, bInitialState, pName );
}

/*************************************************************************************************/
/**
 * イベントを破棄する
 */
/*************************************************************************************************/
void KsCloseEvent( KsHandle handle )
{
	CloseHandle( handle );
}

/*************************************************************************************************/
/*
 * イベントオブジェクトをシグナル状態にする。
 * @param	hEvent		イベントオブジェクトを示すハンドル。
 * @retval	ksTRUE		成功
 * @retval	ksFALSE		失敗
 */
/*************************************************************************************************/
KsBool KsSetEvent( KsHandle hEvent )
{
	return ::SetEvent( hEvent );
}

/*************************************************************************************************/
/*
 * イベントオブジェクトを非シグナル状態にする。
 * @param	hEvent		イベントオブジェクトを示すハンドル。
 * @retval	ksTRUE		成功
 * @retval	ksFALSE		失敗
 */
/*************************************************************************************************/
KsBool KsResetEvent( KsHandle hEvent )
{
	return ::ResetEvent( hEvent );
}

/*************************************************************************************************/
/*
 * 指定されたカーネルオブジェクトがシグナル状態になるか、
 * 指定された時間が経過するまでスレッドをスリープさせます。
 * @param	handle			オブジェクトハンドル
 * @param	milliseconds	待ち時間をミリ秒単位
 * @return					状態
 */
/*************************************************************************************************/
KsUInt32 KsWaitEvent( KsHandle handle, KsUInt32 milliseconds )
{
	return s_cast<KsUInt32>( ::WaitForSingleObject( handle, s_cast<DWORD>( milliseconds ) ) );
}

/*************************************************************************************************/
/*
 * 指定されたカーネルオブジェクトがシグナル状態になるか、
 * 指定された時間が経過するまでスレッドをスリープさせます。
 * @param	count			配列内のハンドルの数
 * @param	pHandles		オブジェクトハンドルからなる配列
 * @param	waitAll			待機オプション
 * @param	milliseconds	待ち時間をミリ秒単位
 * @return					状態
 */
/*************************************************************************************************/
KsUInt32 KsWaitEventForMultiple( KsUInt32 count, const HANDLE* pHandles, KsBool waitAll, KsUInt32 milliseconds )
{
	return s_cast<KsUInt32>( ::WaitForMultipleObjects( s_cast<DWORD>( count ), pHandles, waitAll, s_cast<DWORD>( milliseconds ) ) );
}

