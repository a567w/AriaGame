/************************************************************************************************/
/** 
 * @file		KsThreadParam.cpp
 * @brief		スレッド管理
 * @author		Tsukasa Kato
 * @date		2004/08/17
 * @since		----/--/--
 * @version		1.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                          */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsThreadParam::KsThreadParam()
	: m_pParam( 0 )
	, m_bStart( ksFALSE )
	, m_func( 0 )
{
}


/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsThreadParam::KsThreadParam( KsThreadFunc func, void* pParam )
	: m_pParam( pParam )
	, m_bStart( ksFALSE )
	, m_func( func )
{
}

/************************************************************************************************/
/*
 * 
 */
/************************************************************************************************/
void KsThreadParam::start()
{
	KsMutex::scoped_lock scoped_lock(m_mutex);

	m_bStart = ksTRUE;
}

/************************************************************************************************/
/*
 * 
 */
/************************************************************************************************/
void KsThreadParam::wait()
{
	KsMutex::scoped_lock scoped_lock(m_mutex);
			
	if( !m_bStart )
	{
		m_condition.wait( scoped_lock );
	}
}


