/************************************************************************************************/
/** 
 * @file		KsDebugFontManager.cpp
 * @brief		デバック用フォント表示操作
 * @author		Tsukasa Kato
 * @date		2004/10/17
 * @since		2004/10/17
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                            */
/*==============================================================================================*/
#include "KsEngine/KsEnginePreCompile.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/
template<> KsDebugFontManager* KsSingleton< KsDebugFontManager >::m_pInstance = 0;

/************************************************************************************************/
/*
 * シングルトンの参照を取得
 * @return						シングルトンの参照
 */
/************************************************************************************************/
KsDebugFontManager& KsDebugFontManager::getInstance()
{  
	return (*m_pInstance);  
}
/************************************************************************************************/
/*
 * シングルトンのポインタを取得
 * @return						シングルトンのポインタ
 */
/************************************************************************************************/
KsDebugFontManager* KsDebugFontManager::getInstancePtr()
{
	return m_pInstance;
}

/************************************************************************************************/
/*
 * コンストラクタ
 * @param	pTexture	フォントテクスチャ
 */
/************************************************************************************************/
KsDebugFontManager::KsDebugFontManager( const KsChar* pFullPath )
{
	KsRenderSystem* pRenderSystem = KsRenderSystem::getInstancePtr();
	KsTexture*      pTexture      = pRenderSystem->createTextureFromFile( pFullPath, 0 );

	m_pTexture      = pTexture;
	m_count         = 0;
	m_line          = 0;
	m_px            = 16;
	m_py            = 16;
	m_line          = 16;
}

/************************************************************************************************/
/*
 * コンストラクタ
 * @param	pTexture	フォントテクスチャ
 */
/************************************************************************************************/
KsDebugFontManager::KsDebugFontManager( KsTexture* pTexture )
{
	m_pTexture      = pTexture;
	m_count         = 0;
	m_line          = 0;
	m_px            = 16;
	m_py            = 16;
	m_line          = 16;
}

/************************************************************************************************/
/*
 * デストラクタ
 */
/************************************************************************************************/
KsDebugFontManager::~KsDebugFontManager()
{
	ksDESTROY( m_pTexture );
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsDebugFontManager::print( KsInt32 x, KsInt32 y, const KsChar* format, ... )
{
	va_list		list;
	
	va_start( list, format );
	ks_vsprintf( &m_fontWork[ m_count ].m_buffer[0], 256, format, list );
	va_end( list );

	m_fontWork[ m_count ].m_px = x;
	m_fontWork[ m_count ].m_py = y;

	++m_count;
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsDebugFontManager::print( const KsChar* format, ... )
{
	va_list		list;
	
	va_start( list, format );
	ks_vsprintf( m_fontWork[ m_count ].m_buffer, 256, format, list );
	va_end( list );

	m_fontWork[ m_count ].m_px = m_px;
	m_fontWork[ m_count ].m_py = m_py;

	m_py += m_line;

	++m_count;
}

/************************************************************************************************/
/*
 *
 */
/************************************************************************************************/
void KsDebugFontManager::flush()
{
	KsGraphics* pGraphics = KsGraphics::getInstancePtr();

	if( m_pTexture )
	{
		for( KsInt32 i=0; i<m_count; i++ )
		{
			m_fontWork[ i ].draw( pGraphics, m_pTexture );
		}
	}

	m_count = 0;
	m_line  = 0;
	m_px    = 16;
	m_py    = 16;
}


