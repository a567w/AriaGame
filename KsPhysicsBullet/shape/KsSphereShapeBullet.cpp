/************************************************************************************************/
/** 
 * @file		KsSphereShapeBullet.h
 * @brief		物理シミュレーションシステム
 * @author		Tsukasa Kato
 * @date		----/--/--
 * @since		----/--/--
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/
#include "KsPhysicsBullet/KsPhysicsBulletPreCompile.h"
#include "KsSphereShapeBullet.h"

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/************************************************************************************************/
/*
 * コンストラクタ
 */
/************************************************************************************************/
KsSphereShapeBullet::KsSphereShapeBullet( KsReal radius )
	: m_pSphereShape( 0 )
{
	m_pSphereShape = new btSphereShape( radius );
}

/************************************************************************************************/
/*
 * デストラクタ
 */
/************************************************************************************************/
KsSphereShapeBullet::~KsSphereShapeBullet()
{
	ksDELETE( m_pSphereShape );
}

/************************************************************************************************/
/*
 * 慣性テンソルの計算
 */
/************************************************************************************************/
void KsSphereShapeBullet::calculateLocalInertia( KsReal mass, KsVector3d& inertia )
{
	btVector3	localInertia( 0.0f, 0.0f, 0.0f );

	m_pSphereShape->calculateLocalInertia( mass, localInertia );

	inertia.set( localInertia.getX(), localInertia.getY(), localInertia.getZ() );
}



