/************************************************************************************************/
/** 
 * @file		KsPhysicsThread.cpp
 * @brief		物理シミュレーション用スレッド
 * @author		Tsukasa Kato
 * @date		2011/07/02
 * @since		2011/07/02
 * @version		1.0.0
 */
/************************************************************************************************/

/*==============================================================================================*/
/*                                 << ワーニング抑制 >>                                         */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                 << ライブラリリンク >>                                       */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                 << インクルード >>                                           */
/*==============================================================================================*/
#include "Aria/KsGamePreCompile.h"
#include "Aria/thread/KsPhysicsThread.h"

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/

/************************************************************************************************/
/*
 * ゲームシステム生成
 */
/************************************************************************************************/
KsPhysicsThread::KsPhysicsThread( ksTHREAD_PRIORITY_TYPE priority, KsUInt32 prosessor )
	: m_bThreadLoop( ksFALSE )
	, m_timeStep( 1.0f/60.0f )
	, m_fixedTimeStep( 1.0f/60.0f )
	, m_maxSubSteps( 2 )
	, m_priority( priority )
	, m_prosessor( prosessor )
{
	try
	{
		m_beginSimulation = KsCreateEvent( ksFALSE, ksFALSE, "PhysicsBeginEvent" );
		m_endSimulation   = KsCreateEvent( ksFALSE, ksTRUE,  "PhysicsEndEvent" );

		/* 物理エンジンシステム生成 */
		m_pPhysicsSystem = KsPhysicsSystemFactory( ksPHYSICSSYSTEM_BULLET, NULL );

		if( !m_pPhysicsSystem )
		{
			throw "物理エンジンシステム生成エラー!!";
		}
	}
	catch( const KsChar* pszError )
	{
		/* エラー */
		KsError( pszError );
	}

	// スタートさせる
	run();
}

/************************************************************************************************/
/*
 * デストラクタ
 */
/************************************************************************************************/
KsPhysicsThread::~KsPhysicsThread()
{
	// 終了させる
	m_bThreadLoop = ksFALSE;

	// スレッド終了待ちする
	join();

	KsCloseEvent( m_beginSimulation );
	KsCloseEvent( m_endSimulation );

	// 破棄する
	ksDELETE( m_pPhysicsSystem );
}

/************************************************************************************************/
/*
 * 実行する
 */
/************************************************************************************************/
KsBool KsPhysicsThread::run()
{
	m_bThreadLoop = ksTRUE;

	start();

	return ksTRUE;
}

/************************************************************************************************/
/*
 * スレッドのメイン関数
 * @return	実行終了結果
 */
/************************************************************************************************/
KsUInt32 KsPhysicsThread::threadMain()
{
	setPriority( m_priority );
	setProcessor( m_prosessor );

	/* ゲームループ */
	while( m_bThreadLoop )
	{
		// メインスレッドとの同期待ち
		KsWaitEvent( m_beginSimulation );

		// 物理シミュレーション
		m_pPhysicsSystem->stepSimulation( m_timeStep, m_maxSubSteps, m_fixedTimeStep );

		// 物理シミュレーション終了イベントをセットする
		KsSetEvent( m_endSimulation );
	}

	return 0;
}

/************************************************************************************************/
/*
 * 物理シミュレーションを開始する
 */
/************************************************************************************************/
void KsPhysicsThread::startSimulation()
{
	// 物理シミュレーションを開始する
	KsSetEvent( m_beginSimulation );
}

/************************************************************************************************/
/*
 * 物理シミュレーション終了を待つ
 */
/************************************************************************************************/
void KsPhysicsThread::waitSimulation()
{
	// 物理シミュレーション終了を待つ
	KsWaitEvent( m_endSimulation );
}



