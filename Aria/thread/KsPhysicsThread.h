/************************************************************************************************/
/** 
 * @file		KsPhysicsThread.cpp
 * @brief		物理シミュレーション用スレッド
 * @author		Tsukasa Kato
 * @date		2011/07/02
 * @since		2011/07/02
 * @version		1.0.0
 */
/************************************************************************************************/
#ifndef __KSPHYSICSTHREAD_H__
#define __KSPHYSICSTHREAD_H__

/*==============================================================================================*/
/*                                 << インクルード >>                                            */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 宣言 >>                                               */
/*==============================================================================================*/

/*==============================================================================================*/
/*                                     << 定義 >>                                               */
/*==============================================================================================*/


/************************************************************************************************/
/**
 * 物理シミュレーション用スレッド
 * @class	KsPhysicsThread
 * @author  Tsukasa Kato
 * @since   2003/03/22
 * @version ----/--/--
 */
/************************************************************************************************/
class KsPhysicsThread : public KsThread
{
	public:
		/**
		 * コンストラクタ
		 */
										KsPhysicsThread( ksTHREAD_PRIORITY_TYPE priority, KsUInt32 prosessor );

		/**
		 * デストラクタ
		 */
										~KsPhysicsThread();

		/**
		 * 実行する
		 */
		KsBool							run();

		/**
		 * スレッドのメイン関数
		 * @return	実行終了結果
		 */
		virtual KsUInt32				threadMain();

		/**
		 * 物理シミュレーションを開始する
		 */
		void							startSimulation();

		/**
		 * 物理シミュレーション終了を待つ
		 */
		void							waitSimulation();

	private:
		KsPhysicsSystem*				m_pPhysicsSystem;		/**< 物理エンジンシステム		*/
		KsHandle						m_beginSimulation;		/**< 同期イベント				*/
		KsHandle						m_endSimulation;		/**< 終了イベント				*/
		KsBool							m_bThreadLoop;			/**< スレッドループ			*/
		KsReal							m_timeStep;				/**< ステップ時間				*/
		KsInt32							m_maxSubSteps;			/**< ステップ時間	(max)		*/
		KsReal							m_fixedTimeStep;		/**< ステップ時間	(fixed)		*/
		ksTHREAD_PRIORITY_TYPE			m_priority;				/**< プライオリティ			*/
		KsUInt32						m_prosessor;			/**< プロセッサ番号			*/
};

#endif	/* __KSPHYSICSTHREAD_H__ */


